//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_9
)
.reqntid 128
{
	.reg .pred 	%p<172>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<1287>;
	.reg .f32 	%f<3215>;
	.reg .b64 	%rd<560>;
	.loc	1 45 0                          // matmul.py:45:0
$L__func_begin0:
	.loc	1 45 0                          // matmul.py:45:0

// %bb.0:
	ld.param.u32 	%r109, [matmul_kernel_param_8];
	ld.param.u32 	%r108, [matmul_kernel_param_7];
	ld.param.u32 	%r107, [matmul_kernel_param_5];
	ld.param.u32 	%r106, [matmul_kernel_param_4];
	ld.param.u32 	%r105, [matmul_kernel_param_3];
	ld.param.u64 	%rd106, [matmul_kernel_param_2];
	ld.param.u64 	%rd105, [matmul_kernel_param_1];
	ld.param.u64 	%rd558, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 61 24                         // matmul.py:61:24
	mov.u32 	%r430, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r431, %r105, 127;
	.loc	2 40 28                         // standard.py:40:28
	shr.s32 	%r432, %r431, 31;
	shr.u32 	%r433, %r432, 25;
	add.s32 	%r434, %r431, %r433;
	shr.s32 	%r435, %r434, 7;
$L__tmp2:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r436, %r106, 127;
	.loc	2 40 28                         // standard.py:40:28
	shr.s32 	%r437, %r436, 31;
	shr.u32 	%r438, %r437, 25;
	add.s32 	%r439, %r436, %r438;
	shr.s32 	%r440, %r439, 7;
$L__tmp3:
	.loc	1 64 38                         // matmul.py:64:38
	shl.b32 	%r442, %r440, 3;
	ld.param.u32 	%r443, [matmul_kernel_param_6];
	.loc	1 65 22                         // matmul.py:65:22
	div.s32 	%r444, %r430, %r442;
	.loc	1 66 29                         // matmul.py:66:29
	shl.b32 	%r445, %r444, 3;
	.loc	1 67 35                         // matmul.py:67:35
	sub.s32 	%r446, %r435, %r445;
	.loc	1 67 48                         // matmul.py:67:48
	min.s32 	%r448, %r446, 8;
	.loc	1 68 34                         // matmul.py:68:34
	mul.lo.s32 	%r449, %r444, %r442;
	sub.s32 	%r450, %r430, %r449;
	.loc	1 69 40                         // matmul.py:69:40
	div.s32 	%r451, %r450, %r448;
	.loc	1 68 54                         // matmul.py:68:54
	mul.lo.s32 	%r452, %r451, %r448;
	sub.s32 	%r453, %r450, %r452;
	.loc	1 68 27                         // matmul.py:68:27
	add.s32 	%r454, %r453, %r445;
	.loc	1 71 23                         // matmul.py:71:23
	shl.b32 	%r455, %r454, 7;
	.loc	1 71 51                         // matmul.py:71:51
	mov.u32 	%r1, %tid.x;
	and.b32  	%r3, %r1, 16;
	bfe.s32 	%r456, %r1, 4, 1;
	bfe.s32 	%r457, %r1, 5, 1;
	bfe.s32 	%r458, %r1, 6, 1;
	and.b32  	%r459, %r1, 64;
	bfe.u32 	%r460, %r1, 4, 3;
	and.b32  	%r461, %r1, 1;
	neg.s32 	%r462, %r461;
	shl.b32 	%r463, %r1, 2;
	and.b32  	%r464, %r463, 28;
	and.b32  	%r465, %r1, 8;
	and.b32  	%r4, %r463, 60;
	and.b32  	%r466, %r463, 124;
	.loc	1 71 38                         // matmul.py:71:38
	or.b32  	%r5, %r455, %r460;
	or.b32  	%r6, %r5, 8;
	or.b32  	%r7, %r5, 16;
	or.b32  	%r8, %r5, 24;
	or.b32  	%r9, %r5, 32;
	or.b32  	%r10, %r5, 40;
	or.b32  	%r11, %r5, 48;
	or.b32  	%r12, %r5, 56;
	or.b32  	%r13, %r5, 64;
	or.b32  	%r14, %r5, 72;
	or.b32  	%r15, %r5, 80;
	or.b32  	%r16, %r5, 88;
	or.b32  	%r17, %r5, 96;
	or.b32  	%r18, %r5, 104;
	or.b32  	%r19, %r5, 112;
	or.b32  	%r20, %r5, 120;
	.loc	1 71 68                         // matmul.py:71:68
	rem.s32 	%r467, %r5, %r105;
	rem.s32 	%r468, %r6, %r105;
	rem.s32 	%r469, %r7, %r105;
	rem.s32 	%r470, %r8, %r105;
	rem.s32 	%r471, %r9, %r105;
	rem.s32 	%r472, %r10, %r105;
	rem.s32 	%r473, %r11, %r105;
	rem.s32 	%r474, %r12, %r105;
	rem.s32 	%r475, %r13, %r105;
	rem.s32 	%r476, %r14, %r105;
	rem.s32 	%r477, %r15, %r105;
	rem.s32 	%r478, %r16, %r105;
	rem.s32 	%r479, %r17, %r105;
	rem.s32 	%r480, %r18, %r105;
	rem.s32 	%r481, %r19, %r105;
	rem.s32 	%r482, %r20, %r105;
	.loc	1 72 23                         // matmul.py:72:23
	shl.b32 	%r21, %r451, 7;
	.loc	1 72 38                         // matmul.py:72:38
	or.b32  	%r483, %r21, %r466;
	or.b32  	%r484, %r483, 1;
	or.b32  	%r485, %r483, 2;
	or.b32  	%r486, %r483, 3;
	.loc	1 72 68                         // matmul.py:72:68
	rem.s32 	%r22, %r483, %r106;
	rem.s32 	%r23, %r484, %r106;
	rem.s32 	%r24, %r485, %r106;
	rem.s32 	%r25, %r486, %r106;
	.loc	1 74 53                         // matmul.py:74:53
	mad.lo.s32 	%r487, %r467, %r443, %r4;
	mad.lo.s32 	%r488, %r468, %r443, %r4;
	mad.lo.s32 	%r489, %r469, %r443, %r4;
	mad.lo.s32 	%r490, %r470, %r443, %r4;
	mad.lo.s32 	%r491, %r471, %r443, %r4;
	mad.lo.s32 	%r492, %r472, %r443, %r4;
	mad.lo.s32 	%r493, %r473, %r443, %r4;
	mad.lo.s32 	%r494, %r474, %r443, %r4;
	mad.lo.s32 	%r495, %r475, %r443, %r4;
	mad.lo.s32 	%r496, %r476, %r443, %r4;
	mad.lo.s32 	%r497, %r477, %r443, %r4;
	mad.lo.s32 	%r498, %r478, %r443, %r4;
	mad.lo.s32 	%r499, %r479, %r443, %r4;
	mad.lo.s32 	%r500, %r480, %r443, %r4;
	mad.lo.s32 	%r501, %r481, %r443, %r4;
	mad.lo.s32 	%r502, %r482, %r443, %r4;
	.loc	1 74 22                         // matmul.py:74:22
	mul.wide.s32 	%rd267, %r487, 4;
	add.s64 	%rd107, %rd558, %rd267;
	mul.wide.s32 	%rd268, %r488, 4;
	add.s64 	%rd108, %rd558, %rd268;
	mul.wide.s32 	%rd269, %r489, 4;
	add.s64 	%rd109, %rd558, %rd269;
	mul.wide.s32 	%rd270, %r490, 4;
	add.s64 	%rd110, %rd558, %rd270;
	mul.wide.s32 	%rd271, %r491, 4;
	add.s64 	%rd111, %rd558, %rd271;
	mul.wide.s32 	%rd272, %r492, 4;
	add.s64 	%rd112, %rd558, %rd272;
	mul.wide.s32 	%rd273, %r493, 4;
	add.s64 	%rd113, %rd558, %rd273;
	mul.wide.s32 	%rd274, %r494, 4;
	add.s64 	%rd114, %rd558, %rd274;
	mul.wide.s32 	%rd275, %r495, 4;
	add.s64 	%rd115, %rd558, %rd275;
	mul.wide.s32 	%rd276, %r496, 4;
	add.s64 	%rd116, %rd558, %rd276;
	mul.wide.s32 	%rd277, %r497, 4;
	add.s64 	%rd117, %rd558, %rd277;
	mul.wide.s32 	%rd278, %r498, 4;
	add.s64 	%rd118, %rd558, %rd278;
	mul.wide.s32 	%rd279, %r499, 4;
	add.s64 	%rd119, %rd558, %rd279;
	mul.wide.s32 	%rd280, %r500, 4;
	add.s64 	%rd120, %rd558, %rd280;
	mul.wide.s32 	%rd281, %r501, 4;
	add.s64 	%rd121, %rd558, %rd281;
	mul.wide.s32 	%rd282, %r502, 4;
	add.s64 	%rd122, %rd558, %rd282;
	.loc	1 75 29                         // matmul.py:75:29
	bfe.u32 	%r26, %r1, 5, 1;
	shr.u32 	%r27, %r459, 5;
	or.b32  	%r28, %r26, %r27;
	or.b32  	%r29, %r28, 4;
	or.b32  	%r30, %r28, 8;
	or.b32  	%r31, %r28, 12;
	or.b32  	%r32, %r28, 16;
	or.b32  	%r33, %r28, 20;
	or.b32  	%r34, %r28, 24;
	or.b32  	%r35, %r28, 28;
	or.b32  	%r36, %r28, 32;
	or.b32  	%r37, %r28, 36;
	or.b32  	%r38, %r28, 40;
	or.b32  	%r39, %r28, 44;
	or.b32  	%r40, %r28, 48;
	or.b32  	%r41, %r28, 52;
	or.b32  	%r42, %r28, 56;
	or.b32  	%r43, %r28, 60;
	.loc	1 75 40                         // matmul.py:75:40
	mul.lo.s32 	%r503, %r108, %r28;
	shl.b32 	%r504, %r108, 2;
	add.s32 	%r505, %r503, %r504;
	add.s32 	%r506, %r505, %r504;
	add.s32 	%r507, %r506, %r504;
	add.s32 	%r508, %r507, %r504;
	add.s32 	%r509, %r508, %r504;
	add.s32 	%r510, %r509, %r504;
	add.s32 	%r511, %r510, %r504;
	add.s32 	%r512, %r511, %r504;
	add.s32 	%r513, %r512, %r504;
	add.s32 	%r514, %r513, %r504;
	add.s32 	%r515, %r514, %r504;
	add.s32 	%r516, %r515, %r504;
	add.s32 	%r517, %r516, %r504;
	add.s32 	%r518, %r517, %r504;
	add.s32 	%r519, %r518, %r504;
	.loc	1 75 52                         // matmul.py:75:52
	add.s32 	%r520, %r22, %r503;
	add.s32 	%r521, %r23, %r503;
	add.s32 	%r522, %r24, %r503;
	add.s32 	%r523, %r25, %r503;
	add.s32 	%r524, %r22, %r505;
	add.s32 	%r525, %r23, %r505;
	add.s32 	%r526, %r24, %r505;
	add.s32 	%r527, %r25, %r505;
	add.s32 	%r528, %r22, %r506;
	add.s32 	%r529, %r23, %r506;
	add.s32 	%r530, %r24, %r506;
	add.s32 	%r531, %r25, %r506;
	add.s32 	%r532, %r22, %r507;
	add.s32 	%r533, %r23, %r507;
	add.s32 	%r534, %r24, %r507;
	add.s32 	%r535, %r25, %r507;
	add.s32 	%r536, %r22, %r508;
	add.s32 	%r537, %r23, %r508;
	add.s32 	%r538, %r24, %r508;
	add.s32 	%r539, %r25, %r508;
	add.s32 	%r540, %r22, %r509;
	add.s32 	%r541, %r23, %r509;
	add.s32 	%r542, %r24, %r509;
	add.s32 	%r543, %r25, %r509;
	add.s32 	%r544, %r22, %r510;
	add.s32 	%r545, %r23, %r510;
	add.s32 	%r546, %r24, %r510;
	add.s32 	%r547, %r25, %r510;
	add.s32 	%r548, %r22, %r511;
	add.s32 	%r549, %r23, %r511;
	add.s32 	%r550, %r24, %r511;
	add.s32 	%r551, %r25, %r511;
	add.s32 	%r552, %r22, %r512;
	add.s32 	%r553, %r23, %r512;
	add.s32 	%r554, %r24, %r512;
	add.s32 	%r555, %r25, %r512;
	add.s32 	%r556, %r22, %r513;
	add.s32 	%r557, %r23, %r513;
	add.s32 	%r558, %r24, %r513;
	add.s32 	%r559, %r25, %r513;
	add.s32 	%r560, %r22, %r514;
	add.s32 	%r561, %r23, %r514;
	add.s32 	%r562, %r24, %r514;
	add.s32 	%r563, %r25, %r514;
	add.s32 	%r564, %r22, %r515;
	add.s32 	%r565, %r23, %r515;
	add.s32 	%r566, %r24, %r515;
	add.s32 	%r567, %r25, %r515;
	add.s32 	%r568, %r22, %r516;
	add.s32 	%r569, %r23, %r516;
	add.s32 	%r570, %r24, %r516;
	add.s32 	%r571, %r25, %r516;
	add.s32 	%r572, %r22, %r517;
	add.s32 	%r573, %r23, %r517;
	add.s32 	%r574, %r24, %r517;
	add.s32 	%r575, %r25, %r517;
	add.s32 	%r576, %r22, %r518;
	add.s32 	%r577, %r23, %r518;
	add.s32 	%r578, %r24, %r518;
	add.s32 	%r579, %r25, %r518;
	add.s32 	%r580, %r22, %r519;
	add.s32 	%r581, %r23, %r519;
	add.s32 	%r582, %r24, %r519;
	add.s32 	%r583, %r25, %r519;
	.loc	1 75 22                         // matmul.py:75:22
	mul.wide.s32 	%rd283, %r520, 4;
	add.s64 	%rd123, %rd105, %rd283;
	mul.wide.s32 	%rd284, %r521, 4;
	add.s64 	%rd124, %rd105, %rd284;
	mul.wide.s32 	%rd285, %r522, 4;
	add.s64 	%rd125, %rd105, %rd285;
	mul.wide.s32 	%rd286, %r523, 4;
	add.s64 	%rd126, %rd105, %rd286;
	mul.wide.s32 	%rd287, %r524, 4;
	add.s64 	%rd127, %rd105, %rd287;
	mul.wide.s32 	%rd288, %r525, 4;
	add.s64 	%rd128, %rd105, %rd288;
	mul.wide.s32 	%rd289, %r526, 4;
	add.s64 	%rd129, %rd105, %rd289;
	mul.wide.s32 	%rd290, %r527, 4;
	add.s64 	%rd130, %rd105, %rd290;
	mul.wide.s32 	%rd291, %r528, 4;
	add.s64 	%rd131, %rd105, %rd291;
	mul.wide.s32 	%rd292, %r529, 4;
	add.s64 	%rd132, %rd105, %rd292;
	mul.wide.s32 	%rd293, %r530, 4;
	add.s64 	%rd133, %rd105, %rd293;
	mul.wide.s32 	%rd294, %r531, 4;
	add.s64 	%rd134, %rd105, %rd294;
	mul.wide.s32 	%rd295, %r532, 4;
	add.s64 	%rd135, %rd105, %rd295;
	mul.wide.s32 	%rd296, %r533, 4;
	add.s64 	%rd136, %rd105, %rd296;
	mul.wide.s32 	%rd297, %r534, 4;
	add.s64 	%rd137, %rd105, %rd297;
	mul.wide.s32 	%rd298, %r535, 4;
	add.s64 	%rd138, %rd105, %rd298;
	mul.wide.s32 	%rd299, %r536, 4;
	add.s64 	%rd139, %rd105, %rd299;
	mul.wide.s32 	%rd300, %r537, 4;
	add.s64 	%rd140, %rd105, %rd300;
	mul.wide.s32 	%rd301, %r538, 4;
	add.s64 	%rd141, %rd105, %rd301;
	mul.wide.s32 	%rd302, %r539, 4;
	add.s64 	%rd142, %rd105, %rd302;
	mul.wide.s32 	%rd303, %r540, 4;
	add.s64 	%rd143, %rd105, %rd303;
	mul.wide.s32 	%rd304, %r541, 4;
	add.s64 	%rd144, %rd105, %rd304;
	mul.wide.s32 	%rd305, %r542, 4;
	add.s64 	%rd145, %rd105, %rd305;
	mul.wide.s32 	%rd306, %r543, 4;
	add.s64 	%rd146, %rd105, %rd306;
	mul.wide.s32 	%rd307, %r544, 4;
	add.s64 	%rd147, %rd105, %rd307;
	mul.wide.s32 	%rd308, %r545, 4;
	add.s64 	%rd148, %rd105, %rd308;
	mul.wide.s32 	%rd309, %r546, 4;
	add.s64 	%rd149, %rd105, %rd309;
	mul.wide.s32 	%rd310, %r547, 4;
	add.s64 	%rd150, %rd105, %rd310;
	mul.wide.s32 	%rd311, %r548, 4;
	add.s64 	%rd151, %rd105, %rd311;
	mul.wide.s32 	%rd312, %r549, 4;
	add.s64 	%rd152, %rd105, %rd312;
	mul.wide.s32 	%rd313, %r550, 4;
	add.s64 	%rd153, %rd105, %rd313;
	mul.wide.s32 	%rd314, %r551, 4;
	add.s64 	%rd154, %rd105, %rd314;
	mul.wide.s32 	%rd315, %r552, 4;
	add.s64 	%rd155, %rd105, %rd315;
	mul.wide.s32 	%rd316, %r553, 4;
	add.s64 	%rd156, %rd105, %rd316;
	mul.wide.s32 	%rd317, %r554, 4;
	add.s64 	%rd157, %rd105, %rd317;
	mul.wide.s32 	%rd318, %r555, 4;
	add.s64 	%rd158, %rd105, %rd318;
	mul.wide.s32 	%rd319, %r556, 4;
	add.s64 	%rd159, %rd105, %rd319;
	mul.wide.s32 	%rd320, %r557, 4;
	add.s64 	%rd160, %rd105, %rd320;
	mul.wide.s32 	%rd321, %r558, 4;
	add.s64 	%rd161, %rd105, %rd321;
	mul.wide.s32 	%rd322, %r559, 4;
	add.s64 	%rd162, %rd105, %rd322;
	mul.wide.s32 	%rd323, %r560, 4;
	add.s64 	%rd163, %rd105, %rd323;
	mul.wide.s32 	%rd324, %r561, 4;
	add.s64 	%rd164, %rd105, %rd324;
	mul.wide.s32 	%rd325, %r562, 4;
	add.s64 	%rd165, %rd105, %rd325;
	mul.wide.s32 	%rd326, %r563, 4;
	add.s64 	%rd166, %rd105, %rd326;
	mul.wide.s32 	%rd327, %r564, 4;
	add.s64 	%rd167, %rd105, %rd327;
	mul.wide.s32 	%rd328, %r565, 4;
	add.s64 	%rd168, %rd105, %rd328;
	mul.wide.s32 	%rd329, %r566, 4;
	add.s64 	%rd169, %rd105, %rd329;
	mul.wide.s32 	%rd330, %r567, 4;
	add.s64 	%rd170, %rd105, %rd330;
	mul.wide.s32 	%rd331, %r568, 4;
	add.s64 	%rd171, %rd105, %rd331;
	mul.wide.s32 	%rd332, %r569, 4;
	add.s64 	%rd172, %rd105, %rd332;
	mul.wide.s32 	%rd333, %r570, 4;
	add.s64 	%rd173, %rd105, %rd333;
	mul.wide.s32 	%rd334, %r571, 4;
	add.s64 	%rd174, %rd105, %rd334;
	mul.wide.s32 	%rd335, %r572, 4;
	add.s64 	%rd175, %rd105, %rd335;
	mul.wide.s32 	%rd336, %r573, 4;
	add.s64 	%rd176, %rd105, %rd336;
	mul.wide.s32 	%rd337, %r574, 4;
	add.s64 	%rd177, %rd105, %rd337;
	mul.wide.s32 	%rd338, %r575, 4;
	add.s64 	%rd178, %rd105, %rd338;
	mul.wide.s32 	%rd339, %r576, 4;
	add.s64 	%rd179, %rd105, %rd339;
	mul.wide.s32 	%rd340, %r577, 4;
	add.s64 	%rd180, %rd105, %rd340;
	mul.wide.s32 	%rd341, %r578, 4;
	add.s64 	%rd181, %rd105, %rd341;
	mul.wide.s32 	%rd342, %r579, 4;
	add.s64 	%rd182, %rd105, %rd342;
	mul.wide.s32 	%rd343, %r580, 4;
	add.s64 	%rd183, %rd105, %rd343;
	mul.wide.s32 	%rd344, %r581, 4;
	add.s64 	%rd184, %rd105, %rd344;
	mul.wide.s32 	%rd345, %r582, 4;
	add.s64 	%rd185, %rd105, %rd345;
	mul.wide.s32 	%rd346, %r583, 4;
	add.s64 	%rd186, %rd105, %rd346;
$L__tmp4:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r584, %r107, 63;
$L__tmp5:
	.loc	1 87 33                         // matmul.py:87:33
	shl.b32 	%r588, %r108, 6;
	.loc	1 78 22                         // matmul.py:78:22
	setp.lt.s32 	%p1, %r584, 64;
	setp.gt.s32 	%p2, %r584, 63;
	.loc	1 81 51                         // matmul.py:81:51
	setp.lt.s32 	%p3, %r4, %r107;
	.loc	1 81 20                         // matmul.py:81:20
	shl.b32 	%r589, %r465, 9;
	or.b32  	%r590, %r464, %r589;
	and.b32  	%r591, %r456, 36;
	and.b32  	%r592, %r457, 72;
	and.b32  	%r593, %r458, 144;
	or.b32  	%r594, %r592, %r591;
	xor.b32  	%r595, %r594, %r590;
	xor.b32  	%r45, %r595, %r593;
	shl.b32 	%r596, %r45, 2;
	mov.u32 	%r597, global_smem;
	add.s32 	%r110, %r597, %r596;
	or.b32  	%r598, %r590, 256;
	or.b32  	%r599, %r594, %r593;
	xor.b32  	%r46, %r599, %r598;
	shl.b32 	%r600, %r46, 2;
	add.s32 	%r112, %r597, %r600;
	or.b32  	%r601, %r590, 512;
	xor.b32  	%r47, %r599, %r601;
	shl.b32 	%r602, %r47, 2;
	add.s32 	%r114, %r597, %r602;
	or.b32  	%r603, %r590, 768;
	xor.b32  	%r48, %r599, %r603;
	shl.b32 	%r604, %r48, 2;
	add.s32 	%r116, %r597, %r604;
	or.b32  	%r605, %r590, 1024;
	xor.b32  	%r49, %r599, %r605;
	shl.b32 	%r606, %r49, 2;
	add.s32 	%r118, %r597, %r606;
	or.b32  	%r607, %r590, 1280;
	xor.b32  	%r50, %r599, %r607;
	shl.b32 	%r608, %r50, 2;
	add.s32 	%r120, %r597, %r608;
	or.b32  	%r609, %r590, 1536;
	xor.b32  	%r51, %r599, %r609;
	shl.b32 	%r610, %r51, 2;
	add.s32 	%r122, %r597, %r610;
	or.b32  	%r611, %r590, 1792;
	xor.b32  	%r52, %r599, %r611;
	shl.b32 	%r612, %r52, 2;
	add.s32 	%r124, %r597, %r612;
	or.b32  	%r613, %r590, 2048;
	xor.b32  	%r53, %r599, %r613;
	shl.b32 	%r614, %r53, 2;
	add.s32 	%r126, %r597, %r614;
	or.b32  	%r615, %r590, 2304;
	xor.b32  	%r54, %r599, %r615;
	shl.b32 	%r616, %r54, 2;
	add.s32 	%r128, %r597, %r616;
	or.b32  	%r617, %r590, 2560;
	xor.b32  	%r55, %r599, %r617;
	shl.b32 	%r618, %r55, 2;
	add.s32 	%r130, %r597, %r618;
	or.b32  	%r619, %r590, 2816;
	xor.b32  	%r56, %r599, %r619;
	shl.b32 	%r620, %r56, 2;
	add.s32 	%r132, %r597, %r620;
	or.b32  	%r621, %r590, 3072;
	xor.b32  	%r57, %r599, %r621;
	shl.b32 	%r622, %r57, 2;
	add.s32 	%r134, %r597, %r622;
	or.b32  	%r623, %r590, 3328;
	xor.b32  	%r58, %r599, %r623;
	shl.b32 	%r624, %r58, 2;
	add.s32 	%r136, %r597, %r624;
	or.b32  	%r625, %r590, 3584;
	xor.b32  	%r59, %r599, %r625;
	shl.b32 	%r626, %r59, 2;
	add.s32 	%r138, %r597, %r626;
	or.b32  	%r627, %r590, 3840;
	xor.b32  	%r60, %r599, %r627;
	shl.b32 	%r628, %r60, 2;
	add.s32 	%r140, %r597, %r628;
	selp.b32 	%r629, 16, 0, %p2;
	selp.b32 	%r113, %r629, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r110 + 0 ], [ %rd107 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r112 + 0 ], [ %rd108 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r114 + 0 ], [ %rd109 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r116 + 0 ], [ %rd110 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r118 + 0 ], [ %rd111 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r120 + 0 ], [ %rd112 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r122 + 0 ], [ %rd113 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r124 + 0 ], [ %rd114 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r126 + 0 ], [ %rd115 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r128 + 0 ], [ %rd116 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r130 + 0 ], [ %rd117 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r132 + 0 ], [ %rd118 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r134 + 0 ], [ %rd119 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r136 + 0 ], [ %rd120 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r138 + 0 ], [ %rd121 + 0 ], 0x10, %r113;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r140 + 0 ], [ %rd122 + 0 ], 0x10, %r113;
	// end inline asm
	cp.async.commit_group;
	.loc	1 82 51                         // matmul.py:82:51
	setp.lt.s32 	%p4, %r28, %r107;
	setp.lt.s32 	%p5, %r29, %r107;
	setp.lt.s32 	%p6, %r30, %r107;
	setp.lt.s32 	%p7, %r31, %r107;
	setp.lt.s32 	%p8, %r32, %r107;
	setp.lt.s32 	%p9, %r33, %r107;
	setp.lt.s32 	%p10, %r34, %r107;
	setp.lt.s32 	%p11, %r35, %r107;
	setp.lt.s32 	%p12, %r36, %r107;
	setp.lt.s32 	%p13, %r37, %r107;
	setp.lt.s32 	%p14, %r38, %r107;
	setp.lt.s32 	%p15, %r39, %r107;
	setp.lt.s32 	%p16, %r40, %r107;
	setp.lt.s32 	%p17, %r41, %r107;
	setp.lt.s32 	%p18, %r42, %r107;
	setp.lt.s32 	%p19, %r43, %r107;
	.loc	1 82 20                         // matmul.py:82:20
	and.b32  	%r630, %r462, 144;
	shl.b32 	%r631, %r1, 7;
	and.b32  	%r632, %r631, 768;
	or.b32  	%r633, %r632, %r630;
	or.b32  	%r634, %r465, %r3;
	shl.b32 	%r635, %r634, 7;
	or.b32  	%r636, %r635, %r633;
	or.b32  	%r637, %r636, %r26;
	or.b32  	%r61, %r637, %r27;
	shl.b32 	%r638, %r61, 2;
	add.s32 	%r639, %r597, 98304;
	add.s32 	%r142, %r639, %r638;
	or.b32  	%r62, %r28, %r636;
	shl.b32 	%r640, %r62, 2;
	add.s32 	%r641, %r639, %r640;
	add.s32 	%r144, %r641, 144;
	add.s32 	%r146, %r641, 288;
	add.s32 	%r148, %r641, 432;
	add.s32 	%r150, %r641, 16;
	add.s32 	%r152, %r641, 128;
	add.s32 	%r154, %r641, 304;
	add.s32 	%r156, %r641, 416;
	add.s32 	%r158, %r641, 32;
	add.s32 	%r160, %r641, 176;
	add.s32 	%r162, %r641, 256;
	add.s32 	%r164, %r641, 400;
	add.s32 	%r166, %r641, 48;
	add.s32 	%r168, %r641, 160;
	add.s32 	%r170, %r641, 272;
	add.s32 	%r172, %r641, 384;
	xor.b32  	%r63, %r61, 16;
	shl.b32 	%r642, %r63, 2;
	add.s32 	%r174, %r639, %r642;
	xor.b32  	%r64, %r61, 52;
	shl.b32 	%r643, %r64, 2;
	add.s32 	%r176, %r639, %r643;
	xor.b32  	%r65, %r61, 88;
	shl.b32 	%r644, %r65, 2;
	add.s32 	%r178, %r639, %r644;
	xor.b32  	%r66, %r61, 124;
	shl.b32 	%r645, %r66, 2;
	add.s32 	%r180, %r639, %r645;
	xor.b32  	%r67, %r61, 20;
	shl.b32 	%r646, %r67, 2;
	add.s32 	%r182, %r639, %r646;
	xor.b32  	%r68, %r61, 48;
	shl.b32 	%r647, %r68, 2;
	add.s32 	%r184, %r639, %r647;
	xor.b32  	%r69, %r61, 92;
	shl.b32 	%r648, %r69, 2;
	add.s32 	%r186, %r639, %r648;
	xor.b32  	%r70, %r61, 120;
	shl.b32 	%r649, %r70, 2;
	add.s32 	%r188, %r639, %r649;
	xor.b32  	%r71, %r61, 24;
	shl.b32 	%r650, %r71, 2;
	add.s32 	%r190, %r639, %r650;
	xor.b32  	%r72, %r61, 60;
	shl.b32 	%r651, %r72, 2;
	add.s32 	%r192, %r639, %r651;
	xor.b32  	%r73, %r61, 80;
	shl.b32 	%r652, %r73, 2;
	add.s32 	%r194, %r639, %r652;
	xor.b32  	%r74, %r61, 116;
	shl.b32 	%r653, %r74, 2;
	add.s32 	%r196, %r639, %r653;
	xor.b32  	%r75, %r61, 28;
	shl.b32 	%r654, %r75, 2;
	add.s32 	%r198, %r639, %r654;
	xor.b32  	%r76, %r61, 56;
	shl.b32 	%r655, %r76, 2;
	add.s32 	%r200, %r639, %r655;
	xor.b32  	%r77, %r61, 84;
	shl.b32 	%r656, %r77, 2;
	add.s32 	%r202, %r639, %r656;
	xor.b32  	%r78, %r61, 112;
	shl.b32 	%r657, %r78, 2;
	add.s32 	%r204, %r639, %r657;
	add.s32 	%r206, %r641, 16384;
	add.s32 	%r208, %r641, 16528;
	add.s32 	%r210, %r641, 16672;
	add.s32 	%r212, %r641, 16816;
	add.s32 	%r214, %r641, 16400;
	add.s32 	%r216, %r641, 16512;
	add.s32 	%r218, %r641, 16688;
	add.s32 	%r220, %r641, 16800;
	add.s32 	%r222, %r641, 16416;
	add.s32 	%r224, %r641, 16560;
	add.s32 	%r226, %r641, 16640;
	add.s32 	%r228, %r641, 16784;
	add.s32 	%r230, %r641, 16432;
	add.s32 	%r232, %r641, 16544;
	add.s32 	%r234, %r641, 16656;
	add.s32 	%r236, %r641, 16768;
	xor.b32  	%r79, %r61, 4112;
	shl.b32 	%r658, %r79, 2;
	add.s32 	%r238, %r639, %r658;
	xor.b32  	%r80, %r61, 4148;
	shl.b32 	%r659, %r80, 2;
	add.s32 	%r240, %r639, %r659;
	xor.b32  	%r81, %r61, 4184;
	shl.b32 	%r660, %r81, 2;
	add.s32 	%r242, %r639, %r660;
	xor.b32  	%r82, %r61, 4220;
	shl.b32 	%r661, %r82, 2;
	add.s32 	%r244, %r639, %r661;
	xor.b32  	%r83, %r61, 4116;
	shl.b32 	%r662, %r83, 2;
	add.s32 	%r246, %r639, %r662;
	xor.b32  	%r84, %r61, 4144;
	shl.b32 	%r663, %r84, 2;
	add.s32 	%r248, %r639, %r663;
	xor.b32  	%r85, %r61, 4188;
	shl.b32 	%r664, %r85, 2;
	add.s32 	%r250, %r639, %r664;
	xor.b32  	%r86, %r61, 4216;
	shl.b32 	%r665, %r86, 2;
	add.s32 	%r252, %r639, %r665;
	xor.b32  	%r87, %r61, 4120;
	shl.b32 	%r666, %r87, 2;
	add.s32 	%r254, %r639, %r666;
	xor.b32  	%r88, %r61, 4156;
	shl.b32 	%r667, %r88, 2;
	add.s32 	%r256, %r639, %r667;
	xor.b32  	%r89, %r61, 4176;
	shl.b32 	%r668, %r89, 2;
	add.s32 	%r258, %r639, %r668;
	xor.b32  	%r90, %r61, 4212;
	shl.b32 	%r669, %r90, 2;
	add.s32 	%r260, %r639, %r669;
	xor.b32  	%r91, %r61, 4124;
	shl.b32 	%r670, %r91, 2;
	add.s32 	%r262, %r639, %r670;
	xor.b32  	%r92, %r61, 4152;
	shl.b32 	%r671, %r92, 2;
	add.s32 	%r264, %r639, %r671;
	xor.b32  	%r93, %r61, 4180;
	shl.b32 	%r672, %r93, 2;
	add.s32 	%r266, %r639, %r672;
	xor.b32  	%r94, %r61, 4208;
	shl.b32 	%r673, %r94, 2;
	add.s32 	%r268, %r639, %r673;
	selp.b32 	%r674, 4, 0, %p2;
	selp.b32 	%r145, %r674, 0, %p4;
	// begin inline asm
	cp.async.ca.shared.global [ %r142 + 0 ], [ %rd123 + 0 ], 0x4, %r145;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r144 + 0 ], [ %rd124 + 0 ], 0x4, %r145;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r146 + 0 ], [ %rd125 + 0 ], 0x4, %r145;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r148 + 0 ], [ %rd126 + 0 ], 0x4, %r145;
	// end inline asm
	selp.b32 	%r153, %r674, 0, %p5;
	// begin inline asm
	cp.async.ca.shared.global [ %r150 + 0 ], [ %rd127 + 0 ], 0x4, %r153;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r152 + 0 ], [ %rd128 + 0 ], 0x4, %r153;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r154 + 0 ], [ %rd129 + 0 ], 0x4, %r153;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r156 + 0 ], [ %rd130 + 0 ], 0x4, %r153;
	// end inline asm
	selp.b32 	%r161, %r674, 0, %p6;
	// begin inline asm
	cp.async.ca.shared.global [ %r158 + 0 ], [ %rd131 + 0 ], 0x4, %r161;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r160 + 0 ], [ %rd132 + 0 ], 0x4, %r161;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r162 + 0 ], [ %rd133 + 0 ], 0x4, %r161;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r164 + 0 ], [ %rd134 + 0 ], 0x4, %r161;
	// end inline asm
	selp.b32 	%r169, %r674, 0, %p7;
	// begin inline asm
	cp.async.ca.shared.global [ %r166 + 0 ], [ %rd135 + 0 ], 0x4, %r169;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r168 + 0 ], [ %rd136 + 0 ], 0x4, %r169;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r170 + 0 ], [ %rd137 + 0 ], 0x4, %r169;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r172 + 0 ], [ %rd138 + 0 ], 0x4, %r169;
	// end inline asm
	selp.b32 	%r177, %r674, 0, %p8;
	// begin inline asm
	cp.async.ca.shared.global [ %r174 + 0 ], [ %rd139 + 0 ], 0x4, %r177;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r176 + 0 ], [ %rd140 + 0 ], 0x4, %r177;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r178 + 0 ], [ %rd141 + 0 ], 0x4, %r177;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r180 + 0 ], [ %rd142 + 0 ], 0x4, %r177;
	// end inline asm
	selp.b32 	%r185, %r674, 0, %p9;
	// begin inline asm
	cp.async.ca.shared.global [ %r182 + 0 ], [ %rd143 + 0 ], 0x4, %r185;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r184 + 0 ], [ %rd144 + 0 ], 0x4, %r185;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r186 + 0 ], [ %rd145 + 0 ], 0x4, %r185;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r188 + 0 ], [ %rd146 + 0 ], 0x4, %r185;
	// end inline asm
	selp.b32 	%r193, %r674, 0, %p10;
	// begin inline asm
	cp.async.ca.shared.global [ %r190 + 0 ], [ %rd147 + 0 ], 0x4, %r193;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r192 + 0 ], [ %rd148 + 0 ], 0x4, %r193;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r194 + 0 ], [ %rd149 + 0 ], 0x4, %r193;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r196 + 0 ], [ %rd150 + 0 ], 0x4, %r193;
	// end inline asm
	selp.b32 	%r201, %r674, 0, %p11;
	// begin inline asm
	cp.async.ca.shared.global [ %r198 + 0 ], [ %rd151 + 0 ], 0x4, %r201;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r200 + 0 ], [ %rd152 + 0 ], 0x4, %r201;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r202 + 0 ], [ %rd153 + 0 ], 0x4, %r201;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r204 + 0 ], [ %rd154 + 0 ], 0x4, %r201;
	// end inline asm
	selp.b32 	%r209, %r674, 0, %p12;
	// begin inline asm
	cp.async.ca.shared.global [ %r206 + 0 ], [ %rd155 + 0 ], 0x4, %r209;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r208 + 0 ], [ %rd156 + 0 ], 0x4, %r209;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r210 + 0 ], [ %rd157 + 0 ], 0x4, %r209;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r212 + 0 ], [ %rd158 + 0 ], 0x4, %r209;
	// end inline asm
	selp.b32 	%r217, %r674, 0, %p13;
	// begin inline asm
	cp.async.ca.shared.global [ %r214 + 0 ], [ %rd159 + 0 ], 0x4, %r217;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r216 + 0 ], [ %rd160 + 0 ], 0x4, %r217;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r218 + 0 ], [ %rd161 + 0 ], 0x4, %r217;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r220 + 0 ], [ %rd162 + 0 ], 0x4, %r217;
	// end inline asm
	selp.b32 	%r225, %r674, 0, %p14;
	// begin inline asm
	cp.async.ca.shared.global [ %r222 + 0 ], [ %rd163 + 0 ], 0x4, %r225;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r224 + 0 ], [ %rd164 + 0 ], 0x4, %r225;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r226 + 0 ], [ %rd165 + 0 ], 0x4, %r225;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r228 + 0 ], [ %rd166 + 0 ], 0x4, %r225;
	// end inline asm
	selp.b32 	%r233, %r674, 0, %p15;
	// begin inline asm
	cp.async.ca.shared.global [ %r230 + 0 ], [ %rd167 + 0 ], 0x4, %r233;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r232 + 0 ], [ %rd168 + 0 ], 0x4, %r233;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r234 + 0 ], [ %rd169 + 0 ], 0x4, %r233;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r236 + 0 ], [ %rd170 + 0 ], 0x4, %r233;
	// end inline asm
	selp.b32 	%r241, %r674, 0, %p16;
	// begin inline asm
	cp.async.ca.shared.global [ %r238 + 0 ], [ %rd171 + 0 ], 0x4, %r241;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r240 + 0 ], [ %rd172 + 0 ], 0x4, %r241;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r242 + 0 ], [ %rd173 + 0 ], 0x4, %r241;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r244 + 0 ], [ %rd174 + 0 ], 0x4, %r241;
	// end inline asm
	selp.b32 	%r249, %r674, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r246 + 0 ], [ %rd175 + 0 ], 0x4, %r249;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r248 + 0 ], [ %rd176 + 0 ], 0x4, %r249;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r250 + 0 ], [ %rd177 + 0 ], 0x4, %r249;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r252 + 0 ], [ %rd178 + 0 ], 0x4, %r249;
	// end inline asm
	selp.b32 	%r257, %r674, 0, %p18;
	// begin inline asm
	cp.async.ca.shared.global [ %r254 + 0 ], [ %rd179 + 0 ], 0x4, %r257;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r256 + 0 ], [ %rd180 + 0 ], 0x4, %r257;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r258 + 0 ], [ %rd181 + 0 ], 0x4, %r257;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r260 + 0 ], [ %rd182 + 0 ], 0x4, %r257;
	// end inline asm
	selp.b32 	%r265, %r674, 0, %p19;
	// begin inline asm
	cp.async.ca.shared.global [ %r262 + 0 ], [ %rd183 + 0 ], 0x4, %r265;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r264 + 0 ], [ %rd184 + 0 ], 0x4, %r265;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r266 + 0 ], [ %rd185 + 0 ], 0x4, %r265;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r268 + 0 ], [ %rd186 + 0 ], 0x4, %r265;
	// end inline asm
	cp.async.commit_group;
	.loc	1 78 22                         // matmul.py:78:22
	setp.gt.s32 	%p20, %r584, 127;
	.loc	1 86 18                         // matmul.py:86:18
	add.s64 	%rd187, %rd107, 256;
	add.s64 	%rd188, %rd108, 256;
	add.s64 	%rd189, %rd109, 256;
	add.s64 	%rd190, %rd110, 256;
	add.s64 	%rd191, %rd111, 256;
	add.s64 	%rd192, %rd112, 256;
	add.s64 	%rd193, %rd113, 256;
	add.s64 	%rd194, %rd114, 256;
	add.s64 	%rd195, %rd115, 256;
	add.s64 	%rd196, %rd116, 256;
	add.s64 	%rd197, %rd117, 256;
	add.s64 	%rd198, %rd118, 256;
	add.s64 	%rd199, %rd119, 256;
	add.s64 	%rd200, %rd120, 256;
	add.s64 	%rd201, %rd121, 256;
	add.s64 	%rd202, %rd122, 256;
	.loc	1 87 18                         // matmul.py:87:18
	mul.wide.s32 	%rd347, %r588, 4;
	add.s64 	%rd203, %rd123, %rd347;
	add.s64 	%rd204, %rd124, %rd347;
	add.s64 	%rd205, %rd125, %rd347;
	add.s64 	%rd206, %rd126, %rd347;
	add.s64 	%rd207, %rd127, %rd347;
	add.s64 	%rd208, %rd128, %rd347;
	add.s64 	%rd209, %rd129, %rd347;
	add.s64 	%rd210, %rd130, %rd347;
	add.s64 	%rd211, %rd131, %rd347;
	add.s64 	%rd212, %rd132, %rd347;
	add.s64 	%rd213, %rd133, %rd347;
	add.s64 	%rd214, %rd134, %rd347;
	add.s64 	%rd215, %rd135, %rd347;
	add.s64 	%rd216, %rd136, %rd347;
	add.s64 	%rd217, %rd137, %rd347;
	add.s64 	%rd218, %rd138, %rd347;
	add.s64 	%rd219, %rd139, %rd347;
	add.s64 	%rd220, %rd140, %rd347;
	add.s64 	%rd221, %rd141, %rd347;
	add.s64 	%rd222, %rd142, %rd347;
	add.s64 	%rd223, %rd143, %rd347;
	add.s64 	%rd224, %rd144, %rd347;
	add.s64 	%rd225, %rd145, %rd347;
	add.s64 	%rd226, %rd146, %rd347;
	add.s64 	%rd227, %rd147, %rd347;
	add.s64 	%rd228, %rd148, %rd347;
	add.s64 	%rd229, %rd149, %rd347;
	add.s64 	%rd230, %rd150, %rd347;
	add.s64 	%rd231, %rd151, %rd347;
	add.s64 	%rd232, %rd152, %rd347;
	add.s64 	%rd233, %rd153, %rd347;
	add.s64 	%rd234, %rd154, %rd347;
	add.s64 	%rd235, %rd155, %rd347;
	add.s64 	%rd236, %rd156, %rd347;
	add.s64 	%rd237, %rd157, %rd347;
	add.s64 	%rd238, %rd158, %rd347;
	add.s64 	%rd239, %rd159, %rd347;
	add.s64 	%rd240, %rd160, %rd347;
	add.s64 	%rd241, %rd161, %rd347;
	add.s64 	%rd242, %rd162, %rd347;
	add.s64 	%rd243, %rd163, %rd347;
	add.s64 	%rd244, %rd164, %rd347;
	add.s64 	%rd245, %rd165, %rd347;
	add.s64 	%rd246, %rd166, %rd347;
	add.s64 	%rd247, %rd167, %rd347;
	add.s64 	%rd248, %rd168, %rd347;
	add.s64 	%rd249, %rd169, %rd347;
	add.s64 	%rd250, %rd170, %rd347;
	add.s64 	%rd251, %rd171, %rd347;
	add.s64 	%rd252, %rd172, %rd347;
	add.s64 	%rd253, %rd173, %rd347;
	add.s64 	%rd254, %rd174, %rd347;
	add.s64 	%rd255, %rd175, %rd347;
	add.s64 	%rd256, %rd176, %rd347;
	add.s64 	%rd257, %rd177, %rd347;
	add.s64 	%rd258, %rd178, %rd347;
	add.s64 	%rd259, %rd179, %rd347;
	add.s64 	%rd260, %rd180, %rd347;
	add.s64 	%rd261, %rd181, %rd347;
	add.s64 	%rd262, %rd182, %rd347;
	add.s64 	%rd263, %rd183, %rd347;
	add.s64 	%rd264, %rd184, %rd347;
	add.s64 	%rd265, %rd185, %rd347;
	add.s64 	%rd266, %rd186, %rd347;
	.loc	1 81 55                         // matmul.py:81:55
	add.s32 	%r675, %r107, -64;
	.loc	1 81 51                         // matmul.py:81:51
	setp.lt.s32 	%p21, %r4, %r675;
	.loc	1 81 20                         // matmul.py:81:20
	bar.sync 	0;
	add.s32 	%r676, %r597, 32768;
	add.s32 	%r270, %r676, %r596;
	add.s32 	%r272, %r676, %r600;
	add.s32 	%r274, %r676, %r602;
	add.s32 	%r276, %r676, %r604;
	add.s32 	%r278, %r676, %r606;
	add.s32 	%r280, %r676, %r608;
	add.s32 	%r282, %r676, %r610;
	add.s32 	%r284, %r676, %r612;
	add.s32 	%r286, %r676, %r614;
	add.s32 	%r288, %r676, %r616;
	add.s32 	%r290, %r676, %r618;
	add.s32 	%r292, %r676, %r620;
	add.s32 	%r294, %r676, %r622;
	add.s32 	%r296, %r676, %r624;
	add.s32 	%r298, %r676, %r626;
	add.s32 	%r300, %r676, %r628;
	selp.b32 	%r677, 16, 0, %p21;
	selp.b32 	%r273, %r677, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r270 + 0 ], [ %rd187 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r272 + 0 ], [ %rd188 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r274 + 0 ], [ %rd189 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r276 + 0 ], [ %rd190 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r278 + 0 ], [ %rd191 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r280 + 0 ], [ %rd192 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r282 + 0 ], [ %rd193 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r284 + 0 ], [ %rd194 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r286 + 0 ], [ %rd195 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r288 + 0 ], [ %rd196 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r290 + 0 ], [ %rd197 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r292 + 0 ], [ %rd198 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r294 + 0 ], [ %rd199 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r296 + 0 ], [ %rd200 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r298 + 0 ], [ %rd201 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r300 + 0 ], [ %rd202 + 0 ], 0x10, %r273;
	// end inline asm
	cp.async.commit_group;
	.loc	1 82 51                         // matmul.py:82:51
	setp.lt.s32 	%p22, %r28, %r675;
	setp.lt.s32 	%p23, %r29, %r675;
	setp.lt.s32 	%p24, %r30, %r675;
	setp.lt.s32 	%p25, %r31, %r675;
	setp.lt.s32 	%p26, %r32, %r675;
	setp.lt.s32 	%p27, %r33, %r675;
	setp.lt.s32 	%p28, %r34, %r675;
	setp.lt.s32 	%p29, %r35, %r675;
	setp.lt.s32 	%p30, %r36, %r675;
	setp.lt.s32 	%p31, %r37, %r675;
	setp.lt.s32 	%p32, %r38, %r675;
	setp.lt.s32 	%p33, %r39, %r675;
	setp.lt.s32 	%p34, %r40, %r675;
	setp.lt.s32 	%p35, %r41, %r675;
	setp.lt.s32 	%p36, %r42, %r675;
	setp.lt.s32 	%p37, %r43, %r675;
	.loc	1 82 20                         // matmul.py:82:20
	add.s32 	%r678, %r597, 131072;
	add.s32 	%r302, %r678, %r638;
	add.s32 	%r679, %r678, %r640;
	add.s32 	%r304, %r679, 144;
	add.s32 	%r306, %r679, 288;
	add.s32 	%r308, %r679, 432;
	add.s32 	%r310, %r679, 16;
	add.s32 	%r312, %r679, 128;
	add.s32 	%r314, %r679, 304;
	add.s32 	%r316, %r679, 416;
	add.s32 	%r318, %r679, 32;
	add.s32 	%r320, %r679, 176;
	add.s32 	%r322, %r679, 256;
	add.s32 	%r324, %r679, 400;
	add.s32 	%r326, %r679, 48;
	add.s32 	%r328, %r679, 160;
	add.s32 	%r330, %r679, 272;
	add.s32 	%r332, %r679, 384;
	add.s32 	%r334, %r678, %r642;
	add.s32 	%r336, %r678, %r643;
	add.s32 	%r338, %r678, %r644;
	add.s32 	%r340, %r678, %r645;
	add.s32 	%r342, %r678, %r646;
	add.s32 	%r344, %r678, %r647;
	add.s32 	%r346, %r678, %r648;
	add.s32 	%r348, %r678, %r649;
	add.s32 	%r350, %r678, %r650;
	add.s32 	%r352, %r678, %r651;
	add.s32 	%r354, %r678, %r652;
	add.s32 	%r356, %r678, %r653;
	add.s32 	%r358, %r678, %r654;
	add.s32 	%r360, %r678, %r655;
	add.s32 	%r362, %r678, %r656;
	add.s32 	%r364, %r678, %r657;
	add.s32 	%r366, %r679, 16384;
	add.s32 	%r368, %r679, 16528;
	add.s32 	%r370, %r679, 16672;
	add.s32 	%r372, %r679, 16816;
	add.s32 	%r374, %r679, 16400;
	add.s32 	%r376, %r679, 16512;
	add.s32 	%r378, %r679, 16688;
	add.s32 	%r380, %r679, 16800;
	add.s32 	%r382, %r679, 16416;
	add.s32 	%r384, %r679, 16560;
	add.s32 	%r386, %r679, 16640;
	add.s32 	%r388, %r679, 16784;
	add.s32 	%r390, %r679, 16432;
	add.s32 	%r392, %r679, 16544;
	add.s32 	%r394, %r679, 16656;
	add.s32 	%r396, %r679, 16768;
	add.s32 	%r398, %r678, %r658;
	add.s32 	%r400, %r678, %r659;
	add.s32 	%r402, %r678, %r660;
	add.s32 	%r404, %r678, %r661;
	add.s32 	%r406, %r678, %r662;
	add.s32 	%r408, %r678, %r663;
	add.s32 	%r410, %r678, %r664;
	add.s32 	%r412, %r678, %r665;
	add.s32 	%r414, %r678, %r666;
	add.s32 	%r416, %r678, %r667;
	add.s32 	%r418, %r678, %r668;
	add.s32 	%r420, %r678, %r669;
	add.s32 	%r422, %r678, %r670;
	add.s32 	%r424, %r678, %r671;
	add.s32 	%r426, %r678, %r672;
	add.s32 	%r428, %r678, %r673;
	selp.b32 	%r680, 4, 0, %p22;
	selp.b32 	%r305, %r680, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r302 + 0 ], [ %rd203 + 0 ], 0x4, %r305;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r304 + 0 ], [ %rd204 + 0 ], 0x4, %r305;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r306 + 0 ], [ %rd205 + 0 ], 0x4, %r305;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r308 + 0 ], [ %rd206 + 0 ], 0x4, %r305;
	// end inline asm
	selp.b32 	%r681, 4, 0, %p23;
	selp.b32 	%r313, %r681, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r310 + 0 ], [ %rd207 + 0 ], 0x4, %r313;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r312 + 0 ], [ %rd208 + 0 ], 0x4, %r313;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r314 + 0 ], [ %rd209 + 0 ], 0x4, %r313;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r316 + 0 ], [ %rd210 + 0 ], 0x4, %r313;
	// end inline asm
	selp.b32 	%r682, 4, 0, %p24;
	selp.b32 	%r321, %r682, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r318 + 0 ], [ %rd211 + 0 ], 0x4, %r321;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r320 + 0 ], [ %rd212 + 0 ], 0x4, %r321;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r322 + 0 ], [ %rd213 + 0 ], 0x4, %r321;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r324 + 0 ], [ %rd214 + 0 ], 0x4, %r321;
	// end inline asm
	selp.b32 	%r683, 4, 0, %p25;
	selp.b32 	%r329, %r683, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r326 + 0 ], [ %rd215 + 0 ], 0x4, %r329;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r328 + 0 ], [ %rd216 + 0 ], 0x4, %r329;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r330 + 0 ], [ %rd217 + 0 ], 0x4, %r329;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r332 + 0 ], [ %rd218 + 0 ], 0x4, %r329;
	// end inline asm
	selp.b32 	%r684, 4, 0, %p26;
	selp.b32 	%r337, %r684, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r334 + 0 ], [ %rd219 + 0 ], 0x4, %r337;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r336 + 0 ], [ %rd220 + 0 ], 0x4, %r337;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r338 + 0 ], [ %rd221 + 0 ], 0x4, %r337;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r340 + 0 ], [ %rd222 + 0 ], 0x4, %r337;
	// end inline asm
	selp.b32 	%r685, 4, 0, %p27;
	selp.b32 	%r345, %r685, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r342 + 0 ], [ %rd223 + 0 ], 0x4, %r345;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r344 + 0 ], [ %rd224 + 0 ], 0x4, %r345;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r346 + 0 ], [ %rd225 + 0 ], 0x4, %r345;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r348 + 0 ], [ %rd226 + 0 ], 0x4, %r345;
	// end inline asm
	selp.b32 	%r686, 4, 0, %p28;
	selp.b32 	%r353, %r686, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r350 + 0 ], [ %rd227 + 0 ], 0x4, %r353;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r352 + 0 ], [ %rd228 + 0 ], 0x4, %r353;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r354 + 0 ], [ %rd229 + 0 ], 0x4, %r353;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r356 + 0 ], [ %rd230 + 0 ], 0x4, %r353;
	// end inline asm
	selp.b32 	%r687, 4, 0, %p29;
	selp.b32 	%r361, %r687, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r358 + 0 ], [ %rd231 + 0 ], 0x4, %r361;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r360 + 0 ], [ %rd232 + 0 ], 0x4, %r361;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r362 + 0 ], [ %rd233 + 0 ], 0x4, %r361;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r364 + 0 ], [ %rd234 + 0 ], 0x4, %r361;
	// end inline asm
	selp.b32 	%r688, 4, 0, %p30;
	selp.b32 	%r369, %r688, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r366 + 0 ], [ %rd235 + 0 ], 0x4, %r369;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r368 + 0 ], [ %rd236 + 0 ], 0x4, %r369;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r370 + 0 ], [ %rd237 + 0 ], 0x4, %r369;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r372 + 0 ], [ %rd238 + 0 ], 0x4, %r369;
	// end inline asm
	selp.b32 	%r689, 4, 0, %p31;
	selp.b32 	%r377, %r689, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r374 + 0 ], [ %rd239 + 0 ], 0x4, %r377;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r376 + 0 ], [ %rd240 + 0 ], 0x4, %r377;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r378 + 0 ], [ %rd241 + 0 ], 0x4, %r377;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r380 + 0 ], [ %rd242 + 0 ], 0x4, %r377;
	// end inline asm
	selp.b32 	%r690, 4, 0, %p32;
	selp.b32 	%r385, %r690, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r382 + 0 ], [ %rd243 + 0 ], 0x4, %r385;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r384 + 0 ], [ %rd244 + 0 ], 0x4, %r385;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r386 + 0 ], [ %rd245 + 0 ], 0x4, %r385;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r388 + 0 ], [ %rd246 + 0 ], 0x4, %r385;
	// end inline asm
	selp.b32 	%r691, 4, 0, %p33;
	selp.b32 	%r393, %r691, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r390 + 0 ], [ %rd247 + 0 ], 0x4, %r393;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r392 + 0 ], [ %rd248 + 0 ], 0x4, %r393;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r394 + 0 ], [ %rd249 + 0 ], 0x4, %r393;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r396 + 0 ], [ %rd250 + 0 ], 0x4, %r393;
	// end inline asm
	selp.b32 	%r692, 4, 0, %p34;
	selp.b32 	%r401, %r692, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r398 + 0 ], [ %rd251 + 0 ], 0x4, %r401;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r400 + 0 ], [ %rd252 + 0 ], 0x4, %r401;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r402 + 0 ], [ %rd253 + 0 ], 0x4, %r401;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r404 + 0 ], [ %rd254 + 0 ], 0x4, %r401;
	// end inline asm
	selp.b32 	%r693, 4, 0, %p35;
	selp.b32 	%r409, %r693, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r406 + 0 ], [ %rd255 + 0 ], 0x4, %r409;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r408 + 0 ], [ %rd256 + 0 ], 0x4, %r409;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r410 + 0 ], [ %rd257 + 0 ], 0x4, %r409;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r412 + 0 ], [ %rd258 + 0 ], 0x4, %r409;
	// end inline asm
	selp.b32 	%r694, 4, 0, %p36;
	selp.b32 	%r417, %r694, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r414 + 0 ], [ %rd259 + 0 ], 0x4, %r417;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r416 + 0 ], [ %rd260 + 0 ], 0x4, %r417;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r418 + 0 ], [ %rd261 + 0 ], 0x4, %r417;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r420 + 0 ], [ %rd262 + 0 ], 0x4, %r417;
	// end inline asm
	selp.b32 	%r695, 4, 0, %p37;
	selp.b32 	%r425, %r695, 0, %p20;
	// begin inline asm
	cp.async.ca.shared.global [ %r422 + 0 ], [ %rd263 + 0 ], 0x4, %r425;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r424 + 0 ], [ %rd264 + 0 ], 0x4, %r425;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r426 + 0 ], [ %rd265 + 0 ], 0x4, %r425;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r428 + 0 ], [ %rd266 + 0 ], 0x4, %r425;
	// end inline asm
	cp.async.commit_group;
	mov.f32 	%f2959, 0f00000000;
	mov.f32 	%f2960, %f2959;
	mov.f32 	%f2961, %f2959;
	mov.f32 	%f2962, %f2959;
	mov.f32 	%f2963, %f2959;
	mov.f32 	%f2964, %f2959;
	mov.f32 	%f2965, %f2959;
	mov.f32 	%f2966, %f2959;
	mov.f32 	%f2967, %f2959;
	mov.f32 	%f2968, %f2959;
	mov.f32 	%f2969, %f2959;
	mov.f32 	%f2970, %f2959;
	mov.f32 	%f2971, %f2959;
	mov.f32 	%f2972, %f2959;
	mov.f32 	%f2973, %f2959;
	mov.f32 	%f2974, %f2959;
	mov.f32 	%f2975, %f2959;
	mov.f32 	%f2976, %f2959;
	mov.f32 	%f2977, %f2959;
	mov.f32 	%f2978, %f2959;
	mov.f32 	%f2979, %f2959;
	mov.f32 	%f2980, %f2959;
	mov.f32 	%f2981, %f2959;
	mov.f32 	%f2982, %f2959;
	mov.f32 	%f2983, %f2959;
	mov.f32 	%f2984, %f2959;
	mov.f32 	%f2985, %f2959;
	mov.f32 	%f2986, %f2959;
	mov.f32 	%f2987, %f2959;
	mov.f32 	%f2988, %f2959;
	mov.f32 	%f2989, %f2959;
	mov.f32 	%f2990, %f2959;
	mov.f32 	%f2991, %f2959;
	mov.f32 	%f2992, %f2959;
	mov.f32 	%f2993, %f2959;
	mov.f32 	%f2994, %f2959;
	mov.f32 	%f2995, %f2959;
	mov.f32 	%f2996, %f2959;
	mov.f32 	%f2997, %f2959;
	mov.f32 	%f2998, %f2959;
	mov.f32 	%f2999, %f2959;
	mov.f32 	%f3000, %f2959;
	mov.f32 	%f3001, %f2959;
	mov.f32 	%f3002, %f2959;
	mov.f32 	%f3003, %f2959;
	mov.f32 	%f3004, %f2959;
	mov.f32 	%f3005, %f2959;
	mov.f32 	%f3006, %f2959;
	mov.f32 	%f3007, %f2959;
	mov.f32 	%f3008, %f2959;
	mov.f32 	%f3009, %f2959;
	mov.f32 	%f3010, %f2959;
	mov.f32 	%f3011, %f2959;
	mov.f32 	%f3012, %f2959;
	mov.f32 	%f3013, %f2959;
	mov.f32 	%f3014, %f2959;
	mov.f32 	%f3015, %f2959;
	mov.f32 	%f3016, %f2959;
	mov.f32 	%f3017, %f2959;
	mov.f32 	%f3018, %f2959;
	mov.f32 	%f3019, %f2959;
	mov.f32 	%f3020, %f2959;
	mov.f32 	%f3021, %f2959;
	mov.f32 	%f3022, %f2959;
	mov.f32 	%f3023, %f2959;
	mov.f32 	%f3024, %f2959;
	mov.f32 	%f3025, %f2959;
	mov.f32 	%f3026, %f2959;
	mov.f32 	%f3027, %f2959;
	mov.f32 	%f3028, %f2959;
	mov.f32 	%f3029, %f2959;
	mov.f32 	%f3030, %f2959;
	mov.f32 	%f3031, %f2959;
	mov.f32 	%f3032, %f2959;
	mov.f32 	%f3033, %f2959;
	mov.f32 	%f3034, %f2959;
	mov.f32 	%f3035, %f2959;
	mov.f32 	%f3036, %f2959;
	mov.f32 	%f3037, %f2959;
	mov.f32 	%f3038, %f2959;
	mov.f32 	%f3039, %f2959;
	mov.f32 	%f3040, %f2959;
	mov.f32 	%f3041, %f2959;
	mov.f32 	%f3042, %f2959;
	mov.f32 	%f3043, %f2959;
	mov.f32 	%f3044, %f2959;
	mov.f32 	%f3045, %f2959;
	mov.f32 	%f3046, %f2959;
	mov.f32 	%f3047, %f2959;
	mov.f32 	%f3048, %f2959;
	mov.f32 	%f3049, %f2959;
	mov.f32 	%f3050, %f2959;
	mov.f32 	%f3051, %f2959;
	mov.f32 	%f3052, %f2959;
	mov.f32 	%f3053, %f2959;
	mov.f32 	%f3054, %f2959;
	mov.f32 	%f3055, %f2959;
	mov.f32 	%f3056, %f2959;
	mov.f32 	%f3057, %f2959;
	mov.f32 	%f3058, %f2959;
	mov.f32 	%f3059, %f2959;
	mov.f32 	%f3060, %f2959;
	mov.f32 	%f3061, %f2959;
	mov.f32 	%f3062, %f2959;
	mov.f32 	%f3063, %f2959;
	mov.f32 	%f3064, %f2959;
	mov.f32 	%f3065, %f2959;
	mov.f32 	%f3066, %f2959;
	mov.f32 	%f3067, %f2959;
	mov.f32 	%f3068, %f2959;
	mov.f32 	%f3069, %f2959;
	mov.f32 	%f3070, %f2959;
	mov.f32 	%f3071, %f2959;
	mov.f32 	%f3072, %f2959;
	mov.f32 	%f3073, %f2959;
	mov.f32 	%f3074, %f2959;
	mov.f32 	%f3075, %f2959;
	mov.f32 	%f3076, %f2959;
	mov.f32 	%f3077, %f2959;
	mov.f32 	%f3078, %f2959;
	mov.f32 	%f3079, %f2959;
	mov.f32 	%f3080, %f2959;
	mov.f32 	%f3081, %f2959;
	mov.f32 	%f3082, %f2959;
	mov.f32 	%f3083, %f2959;
	mov.f32 	%f3084, %f2959;
	mov.f32 	%f3085, %f2959;
	mov.f32 	%f3086, %f2959;
	.loc	1 78 22                         // matmul.py:78:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // matmul.py:0:22
	shr.u32 	%r2, %r1, 5;
	cvt.s64.s32 	%rd1, %r487;
	cvt.s64.s32 	%rd2, %r488;
	cvt.s64.s32 	%rd3, %r489;
	cvt.s64.s32 	%rd4, %r490;
	cvt.s64.s32 	%rd5, %r491;
	cvt.s64.s32 	%rd6, %r492;
	cvt.s64.s32 	%rd7, %r493;
	cvt.s64.s32 	%rd8, %r494;
	cvt.s64.s32 	%rd9, %r495;
	cvt.s64.s32 	%rd10, %r496;
	cvt.s64.s32 	%rd11, %r497;
	cvt.s64.s32 	%rd12, %r498;
	cvt.s64.s32 	%rd13, %r499;
	cvt.s64.s32 	%rd14, %r500;
	cvt.s64.s32 	%rd15, %r501;
	cvt.s64.s32 	%rd16, %r502;
	shr.s32 	%r585, %r584, 31;
	shr.u32 	%r586, %r585, 26;
	add.s32 	%r587, %r584, %r586;
	shr.s32 	%r44, %r587, 6;
	cvt.s64.s32 	%rd17, %r588;
	add.s32 	%r95, %r44, -2;
	add.s32 	%r1283, %r107, -128;
	.loc	1 78 22                         // matmul.py:78:22
	add.s32 	%r699, %r27, %r26;
	add.s32 	%r700, %r699, 60;
	mul.lo.s32 	%r701, %r108, %r700;
	add.s32 	%r702, %r25, %r701;
	mul.wide.s32 	%rd18, %r702, 4;
	shl.b64 	%rd348, %rd17, 3;
	add.s64 	%rd559, %rd105, %rd348;
	shl.b64 	%rd20, %rd17, 2;
	add.s32 	%r703, %r24, %r701;
	mul.wide.s32 	%rd21, %r703, 4;
	add.s32 	%r704, %r23, %r701;
	mul.wide.s32 	%rd22, %r704, 4;
	add.s32 	%r705, %r22, %r701;
	mul.wide.s32 	%rd23, %r705, 4;
	or.b32  	%r706, %r699, 56;
	mul.lo.s32 	%r707, %r108, %r706;
	add.s32 	%r708, %r25, %r707;
	mul.wide.s32 	%rd24, %r708, 4;
	add.s32 	%r709, %r24, %r707;
	mul.wide.s32 	%rd25, %r709, 4;
	add.s32 	%r710, %r23, %r707;
	mul.wide.s32 	%rd26, %r710, 4;
	add.s32 	%r711, %r22, %r707;
	mul.wide.s32 	%rd27, %r711, 4;
	add.s32 	%r712, %r699, 52;
	mul.lo.s32 	%r713, %r108, %r712;
	add.s32 	%r714, %r25, %r713;
	mul.wide.s32 	%rd28, %r714, 4;
	add.s32 	%r715, %r24, %r713;
	mul.wide.s32 	%rd29, %r715, 4;
	add.s32 	%r716, %r23, %r713;
	mul.wide.s32 	%rd30, %r716, 4;
	add.s32 	%r717, %r22, %r713;
	mul.wide.s32 	%rd31, %r717, 4;
	or.b32  	%r718, %r699, 48;
	mul.lo.s32 	%r719, %r108, %r718;
	add.s32 	%r720, %r25, %r719;
	mul.wide.s32 	%rd32, %r720, 4;
	add.s32 	%r721, %r24, %r719;
	mul.wide.s32 	%rd33, %r721, 4;
	add.s32 	%r722, %r23, %r719;
	mul.wide.s32 	%rd34, %r722, 4;
	add.s32 	%r723, %r22, %r719;
	mul.wide.s32 	%rd35, %r723, 4;
	add.s32 	%r724, %r699, 44;
	mul.lo.s32 	%r725, %r108, %r724;
	add.s32 	%r726, %r25, %r725;
	mul.wide.s32 	%rd36, %r726, 4;
	add.s32 	%r727, %r24, %r725;
	mul.wide.s32 	%rd37, %r727, 4;
	add.s32 	%r728, %r23, %r725;
	mul.wide.s32 	%rd38, %r728, 4;
	add.s32 	%r729, %r22, %r725;
	mul.wide.s32 	%rd39, %r729, 4;
	or.b32  	%r730, %r699, 40;
	mul.lo.s32 	%r731, %r108, %r730;
	add.s32 	%r732, %r25, %r731;
	mul.wide.s32 	%rd40, %r732, 4;
	add.s32 	%r733, %r24, %r731;
	mul.wide.s32 	%rd41, %r733, 4;
	add.s32 	%r734, %r23, %r731;
	mul.wide.s32 	%rd42, %r734, 4;
	add.s32 	%r735, %r22, %r731;
	mul.wide.s32 	%rd43, %r735, 4;
	add.s32 	%r736, %r699, 36;
	mul.lo.s32 	%r737, %r108, %r736;
	add.s32 	%r738, %r25, %r737;
	mul.wide.s32 	%rd44, %r738, 4;
	add.s32 	%r739, %r24, %r737;
	mul.wide.s32 	%rd45, %r739, 4;
	add.s32 	%r740, %r23, %r737;
	mul.wide.s32 	%rd46, %r740, 4;
	add.s32 	%r741, %r22, %r737;
	mul.wide.s32 	%rd47, %r741, 4;
	or.b32  	%r742, %r699, 32;
	mul.lo.s32 	%r743, %r108, %r742;
	add.s32 	%r744, %r25, %r743;
	mul.wide.s32 	%rd48, %r744, 4;
	add.s32 	%r745, %r24, %r743;
	mul.wide.s32 	%rd49, %r745, 4;
	add.s32 	%r746, %r23, %r743;
	mul.wide.s32 	%rd50, %r746, 4;
	add.s32 	%r747, %r22, %r743;
	mul.wide.s32 	%rd51, %r747, 4;
	add.s32 	%r748, %r699, 28;
	mul.lo.s32 	%r749, %r108, %r748;
	add.s32 	%r750, %r25, %r749;
	mul.wide.s32 	%rd52, %r750, 4;
	add.s32 	%r751, %r24, %r749;
	mul.wide.s32 	%rd53, %r751, 4;
	add.s32 	%r752, %r23, %r749;
	mul.wide.s32 	%rd54, %r752, 4;
	add.s32 	%r753, %r22, %r749;
	mul.wide.s32 	%rd55, %r753, 4;
	or.b32  	%r754, %r699, 24;
	mul.lo.s32 	%r755, %r108, %r754;
	add.s32 	%r756, %r25, %r755;
	mul.wide.s32 	%rd56, %r756, 4;
	add.s32 	%r757, %r24, %r755;
	mul.wide.s32 	%rd57, %r757, 4;
	add.s32 	%r758, %r23, %r755;
	mul.wide.s32 	%rd58, %r758, 4;
	add.s32 	%r759, %r22, %r755;
	mul.wide.s32 	%rd59, %r759, 4;
	add.s32 	%r760, %r699, 20;
	mul.lo.s32 	%r761, %r108, %r760;
	add.s32 	%r762, %r25, %r761;
	mul.wide.s32 	%rd60, %r762, 4;
	add.s32 	%r763, %r24, %r761;
	mul.wide.s32 	%rd61, %r763, 4;
	add.s32 	%r764, %r23, %r761;
	mul.wide.s32 	%rd62, %r764, 4;
	add.s32 	%r765, %r22, %r761;
	mul.wide.s32 	%rd63, %r765, 4;
	or.b32  	%r766, %r699, 16;
	mul.lo.s32 	%r767, %r108, %r766;
	add.s32 	%r768, %r25, %r767;
	mul.wide.s32 	%rd64, %r768, 4;
	add.s32 	%r769, %r24, %r767;
	mul.wide.s32 	%rd65, %r769, 4;
	add.s32 	%r770, %r23, %r767;
	mul.wide.s32 	%rd66, %r770, 4;
	add.s32 	%r771, %r22, %r767;
	mul.wide.s32 	%rd67, %r771, 4;
	add.s32 	%r772, %r699, 12;
	mul.lo.s32 	%r773, %r108, %r772;
	add.s32 	%r774, %r25, %r773;
	mul.wide.s32 	%rd68, %r774, 4;
	add.s32 	%r775, %r24, %r773;
	mul.wide.s32 	%rd69, %r775, 4;
	add.s32 	%r776, %r23, %r773;
	mul.wide.s32 	%rd70, %r776, 4;
	add.s32 	%r777, %r22, %r773;
	mul.wide.s32 	%rd71, %r777, 4;
	or.b32  	%r778, %r699, 8;
	mul.lo.s32 	%r779, %r108, %r778;
	add.s32 	%r780, %r25, %r779;
	mul.wide.s32 	%rd72, %r780, 4;
	add.s32 	%r781, %r24, %r779;
	mul.wide.s32 	%rd73, %r781, 4;
	add.s32 	%r782, %r23, %r779;
	mul.wide.s32 	%rd74, %r782, 4;
	add.s32 	%r783, %r22, %r779;
	mul.wide.s32 	%rd75, %r783, 4;
	add.s32 	%r784, %r699, 4;
	mul.lo.s32 	%r785, %r108, %r784;
	add.s32 	%r786, %r25, %r785;
	mul.wide.s32 	%rd76, %r786, 4;
	add.s32 	%r787, %r24, %r785;
	mul.wide.s32 	%rd77, %r787, 4;
	add.s32 	%r788, %r23, %r785;
	mul.wide.s32 	%rd78, %r788, 4;
	add.s32 	%r789, %r22, %r785;
	mul.wide.s32 	%rd79, %r789, 4;
	mul.lo.s32 	%r790, %r108, %r699;
	add.s32 	%r791, %r25, %r790;
	mul.wide.s32 	%rd80, %r791, 4;
	add.s32 	%r792, %r24, %r790;
	mul.wide.s32 	%rd81, %r792, 4;
	add.s32 	%r793, %r23, %r790;
	mul.wide.s32 	%rd82, %r793, 4;
	add.s32 	%r794, %r22, %r790;
	mul.wide.s32 	%rd83, %r794, 4;
	shl.b64 	%rd349, %rd16, 2;
	add.s64 	%rd84, %rd349, 512;
	shl.b64 	%rd350, %rd15, 2;
	add.s64 	%rd85, %rd350, 512;
	shl.b64 	%rd351, %rd14, 2;
	add.s64 	%rd86, %rd351, 512;
	shl.b64 	%rd352, %rd13, 2;
	add.s64 	%rd87, %rd352, 512;
	shl.b64 	%rd353, %rd12, 2;
	add.s64 	%rd88, %rd353, 512;
	shl.b64 	%rd354, %rd11, 2;
	add.s64 	%rd89, %rd354, 512;
	shl.b64 	%rd355, %rd10, 2;
	add.s64 	%rd90, %rd355, 512;
	shl.b64 	%rd356, %rd9, 2;
	add.s64 	%rd91, %rd356, 512;
	shl.b64 	%rd357, %rd8, 2;
	add.s64 	%rd92, %rd357, 512;
	shl.b64 	%rd358, %rd7, 2;
	add.s64 	%rd93, %rd358, 512;
	shl.b64 	%rd359, %rd6, 2;
	add.s64 	%rd94, %rd359, 512;
	shl.b64 	%rd360, %rd5, 2;
	add.s64 	%rd95, %rd360, 512;
	shl.b64 	%rd361, %rd4, 2;
	add.s64 	%rd96, %rd361, 512;
	shl.b64 	%rd362, %rd3, 2;
	add.s64 	%rd97, %rd362, 512;
	shl.b64 	%rd363, %rd2, 2;
	add.s64 	%rd98, %rd363, 512;
	shl.b64 	%rd364, %rd1, 2;
	add.s64 	%rd99, %rd364, 512;
	mov.b32 	%r1286, 0;
	mov.f32 	%f2698, 0f00000000;
	mov.b32 	%r1285, 1;
	mov.b32 	%r1284, -1;
	mov.f32 	%f2959, %f2698;
	mov.f32 	%f2960, %f2698;
	mov.f32 	%f2961, %f2698;
	mov.f32 	%f2962, %f2698;
	mov.f32 	%f2963, %f2698;
	mov.f32 	%f2964, %f2698;
	mov.f32 	%f2965, %f2698;
	mov.f32 	%f2966, %f2698;
	mov.f32 	%f2967, %f2698;
	mov.f32 	%f2968, %f2698;
	mov.f32 	%f2969, %f2698;
	mov.f32 	%f2970, %f2698;
	mov.f32 	%f2971, %f2698;
	mov.f32 	%f2972, %f2698;
	mov.f32 	%f2973, %f2698;
	mov.f32 	%f2974, %f2698;
	mov.f32 	%f2975, %f2698;
	mov.f32 	%f2976, %f2698;
	mov.f32 	%f2977, %f2698;
	mov.f32 	%f2978, %f2698;
	mov.f32 	%f2979, %f2698;
	mov.f32 	%f2980, %f2698;
	mov.f32 	%f2981, %f2698;
	mov.f32 	%f2982, %f2698;
	mov.f32 	%f2983, %f2698;
	mov.f32 	%f2984, %f2698;
	mov.f32 	%f2985, %f2698;
	mov.f32 	%f2986, %f2698;
	mov.f32 	%f2987, %f2698;
	mov.f32 	%f2988, %f2698;
	mov.f32 	%f2989, %f2698;
	mov.f32 	%f2990, %f2698;
	mov.f32 	%f2991, %f2698;
	mov.f32 	%f2992, %f2698;
	mov.f32 	%f2993, %f2698;
	mov.f32 	%f2994, %f2698;
	mov.f32 	%f2995, %f2698;
	mov.f32 	%f2996, %f2698;
	mov.f32 	%f2997, %f2698;
	mov.f32 	%f2998, %f2698;
	mov.f32 	%f2999, %f2698;
	mov.f32 	%f3000, %f2698;
	mov.f32 	%f3001, %f2698;
	mov.f32 	%f3002, %f2698;
	mov.f32 	%f3003, %f2698;
	mov.f32 	%f3004, %f2698;
	mov.f32 	%f3005, %f2698;
	mov.f32 	%f3006, %f2698;
	mov.f32 	%f3007, %f2698;
	mov.f32 	%f3008, %f2698;
	mov.f32 	%f3009, %f2698;
	mov.f32 	%f3010, %f2698;
	mov.f32 	%f3011, %f2698;
	mov.f32 	%f3012, %f2698;
	mov.f32 	%f3013, %f2698;
	mov.f32 	%f3014, %f2698;
	mov.f32 	%f3015, %f2698;
	mov.f32 	%f3016, %f2698;
	mov.f32 	%f3017, %f2698;
	mov.f32 	%f3018, %f2698;
	mov.f32 	%f3019, %f2698;
	mov.f32 	%f3020, %f2698;
	mov.f32 	%f3021, %f2698;
	mov.f32 	%f3022, %f2698;
	mov.f32 	%f3023, %f2698;
	mov.f32 	%f3024, %f2698;
	mov.f32 	%f3025, %f2698;
	mov.f32 	%f3026, %f2698;
	mov.f32 	%f3027, %f2698;
	mov.f32 	%f3028, %f2698;
	mov.f32 	%f3029, %f2698;
	mov.f32 	%f3030, %f2698;
	mov.f32 	%f3031, %f2698;
	mov.f32 	%f3032, %f2698;
	mov.f32 	%f3033, %f2698;
	mov.f32 	%f3034, %f2698;
	mov.f32 	%f3035, %f2698;
	mov.f32 	%f3036, %f2698;
	mov.f32 	%f3037, %f2698;
	mov.f32 	%f3038, %f2698;
	mov.f32 	%f3039, %f2698;
	mov.f32 	%f3040, %f2698;
	mov.f32 	%f3041, %f2698;
	mov.f32 	%f3042, %f2698;
	mov.f32 	%f3043, %f2698;
	mov.f32 	%f3044, %f2698;
	mov.f32 	%f3045, %f2698;
	mov.f32 	%f3046, %f2698;
	mov.f32 	%f3047, %f2698;
	mov.f32 	%f3048, %f2698;
	mov.f32 	%f3049, %f2698;
	mov.f32 	%f3050, %f2698;
	mov.f32 	%f3051, %f2698;
	mov.f32 	%f3052, %f2698;
	mov.f32 	%f3053, %f2698;
	mov.f32 	%f3054, %f2698;
	mov.f32 	%f3055, %f2698;
	mov.f32 	%f3056, %f2698;
	mov.f32 	%f3057, %f2698;
	mov.f32 	%f3058, %f2698;
	mov.f32 	%f3059, %f2698;
	mov.f32 	%f3060, %f2698;
	mov.f32 	%f3061, %f2698;
	mov.f32 	%f3062, %f2698;
	mov.f32 	%f3063, %f2698;
	mov.f32 	%f3064, %f2698;
	mov.f32 	%f3065, %f2698;
	mov.f32 	%f3066, %f2698;
	mov.f32 	%f3067, %f2698;
	mov.f32 	%f3068, %f2698;
	mov.f32 	%f3069, %f2698;
	mov.f32 	%f3070, %f2698;
	mov.f32 	%f3071, %f2698;
	mov.f32 	%f3072, %f2698;
	mov.f32 	%f3073, %f2698;
	mov.f32 	%f3074, %f2698;
	mov.f32 	%f3075, %f2698;
	mov.f32 	%f3076, %f2698;
	mov.f32 	%f3077, %f2698;
	mov.f32 	%f3078, %f2698;
	mov.f32 	%f3079, %f2698;
	mov.f32 	%f3080, %f2698;
	mov.f32 	%f3081, %f2698;
	mov.f32 	%f3082, %f2698;
	mov.f32 	%f3083, %f2698;
	mov.f32 	%f3084, %f2698;
	mov.f32 	%f3085, %f2698;
	mov.f32 	%f3086, %f2698;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p54, %r1286, %r95;
	add.s32 	%r955, %r1284, 1;
	setp.lt.s32 	%p55, %r955, 3;
	selp.b32 	%r1284, %r955, 0, %p55;
	.loc	1 81 20                         // matmul.py:81:20
	cp.async.wait_group 2;
	bar.sync 	0;
	shl.b32 	%r956, %r1284, 15;
	add.s32 	%r958, %r597, %r956;
	.loc	1 82 20                         // matmul.py:82:20
	add.s32 	%r960, %r639, %r956;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r961, %r958, 32;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r962, %r960, 32;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r963, %r958, 64;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r964, %r960, 64;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r965, %r958, 96;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r966, %r960, 96;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r967, %r958, 128;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r968, %r960, 128;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r969, %r958, 160;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r970, %r960, 160;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r971, %r958, 192;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r972, %r960, 192;
	.loc	1 74 30                         // matmul.py:74:30
	add.s32 	%r973, %r958, 224;
	.loc	1 74 41                         // matmul.py:74:41
	add.s32 	%r974, %r960, 224;
	.loc	1 74 22                         // matmul.py:74:22
	shfl.sync.idx.b32	%r975, %r2, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r976, %r958, 4;
	cvt.u64.u32 	%rd477, %r976;
	and.b64  	%rd478, %rd477, 16383;
	or.b64  	%rd365, %rd478, 4611686293372403712;
	shr.u32 	%r977, %r960, 4;
	cvt.u64.u32 	%rd479, %r977;
	and.b64  	%rd480, %rd479, 16383;
	or.b64  	%rd366, %rd480, 4611686293372403712;
	mov.pred 	%p38, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd365, %rd366, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd367, %rd478, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd367, %rd366, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r978, %r961, 4;
	cvt.u64.u32 	%rd481, %r978;
	and.b64  	%rd482, %rd481, 16383;
	or.b64  	%rd369, %rd482, 4611686293372403712;
	shr.u32 	%r979, %r962, 4;
	cvt.u64.u32 	%rd483, %r979;
	and.b64  	%rd484, %rd483, 16383;
	or.b64  	%rd370, %rd484, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd369, %rd370, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd371, %rd482, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd371, %rd370, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r980, %r963, 4;
	cvt.u64.u32 	%rd485, %r980;
	and.b64  	%rd486, %rd485, 16383;
	or.b64  	%rd373, %rd486, 4611686293372403712;
	shr.u32 	%r981, %r964, 4;
	cvt.u64.u32 	%rd487, %r981;
	and.b64  	%rd488, %rd487, 16383;
	or.b64  	%rd374, %rd488, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd373, %rd374, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd375, %rd486, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd375, %rd374, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r982, %r965, 4;
	cvt.u64.u32 	%rd489, %r982;
	and.b64  	%rd490, %rd489, 16383;
	or.b64  	%rd377, %rd490, 4611686293372403712;
	shr.u32 	%r983, %r966, 4;
	cvt.u64.u32 	%rd491, %r983;
	and.b64  	%rd492, %rd491, 16383;
	or.b64  	%rd378, %rd492, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd377, %rd378, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd379, %rd490, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd379, %rd378, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r984, %r967, 4;
	cvt.u64.u32 	%rd493, %r984;
	and.b64  	%rd494, %rd493, 16383;
	or.b64  	%rd381, %rd494, 4611686293372403712;
	shr.u32 	%r985, %r968, 4;
	cvt.u64.u32 	%rd495, %r985;
	and.b64  	%rd496, %rd495, 16383;
	or.b64  	%rd382, %rd496, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd381, %rd382, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd383, %rd494, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd383, %rd382, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r986, %r969, 4;
	cvt.u64.u32 	%rd497, %r986;
	and.b64  	%rd498, %rd497, 16383;
	or.b64  	%rd385, %rd498, 4611686293372403712;
	shr.u32 	%r987, %r970, 4;
	cvt.u64.u32 	%rd499, %r987;
	and.b64  	%rd500, %rd499, 16383;
	or.b64  	%rd386, %rd500, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd385, %rd386, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd387, %rd498, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd387, %rd386, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r988, %r971, 4;
	cvt.u64.u32 	%rd501, %r988;
	and.b64  	%rd502, %rd501, 16383;
	or.b64  	%rd389, %rd502, 4611686293372403712;
	shr.u32 	%r989, %r972, 4;
	cvt.u64.u32 	%rd503, %r989;
	and.b64  	%rd504, %rd503, 16383;
	or.b64  	%rd390, %rd504, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd389, %rd390, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd391, %rd502, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd391, %rd390, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shr.u32 	%r990, %r973, 4;
	cvt.u64.u32 	%rd505, %r990;
	and.b64  	%rd506, %rd505, 16383;
	or.b64  	%rd393, %rd506, 4611686293372403712;
	shr.u32 	%r991, %r974, 4;
	cvt.u64.u32 	%rd507, %r991;
	and.b64  	%rd508, %rd507, 16383;
	or.b64  	%rd394, %rd508, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022}, %rd393, %rd394, %p38, 1, 1;
	// end inline asm
	add.s64 	%rd395, %rd506, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k8.f32.tf32.tf32 {%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086}, %rd395, %rd394, %p38, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	.loc	1 84 35                         // matmul.py:84:35
	mov.b32 	%f2563, %r958;
	mov.b32 	%f2566, %r960;
	mov.f32 	%f2564, %f2698;
	mov.f32 	%f2565, %f2698;
	mov.f32 	%f2567, %f2698;
	mov.f32 	%f2568, %f2698;
	// begin inline asm
	// wait for regs: %f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022,%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086,%f2563,%f2564,%f2565,%f2566,%f2567,%f2568
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 86 18                         // matmul.py:86:18
	add.s64 	%rd397, %rd558, %rd99;
	add.s64 	%rd398, %rd558, %rd98;
	add.s64 	%rd399, %rd558, %rd97;
	add.s64 	%rd400, %rd558, %rd96;
	add.s64 	%rd401, %rd558, %rd95;
	add.s64 	%rd402, %rd558, %rd94;
	add.s64 	%rd403, %rd558, %rd93;
	add.s64 	%rd404, %rd558, %rd92;
	add.s64 	%rd405, %rd558, %rd91;
	add.s64 	%rd406, %rd558, %rd90;
	add.s64 	%rd407, %rd558, %rd89;
	add.s64 	%rd408, %rd558, %rd88;
	add.s64 	%rd409, %rd558, %rd87;
	add.s64 	%rd410, %rd558, %rd86;
	add.s64 	%rd411, %rd558, %rd85;
	.loc	1 87 18                         // matmul.py:87:18
	add.s64 	%rd412, %rd558, %rd84;
	add.s64 	%rd413, %rd559, %rd83;
	add.s64 	%rd414, %rd559, %rd82;
	add.s64 	%rd415, %rd559, %rd81;
	add.s64 	%rd416, %rd559, %rd80;
	add.s64 	%rd417, %rd559, %rd79;
	add.s64 	%rd418, %rd559, %rd78;
	add.s64 	%rd419, %rd559, %rd77;
	add.s64 	%rd420, %rd559, %rd76;
	add.s64 	%rd421, %rd559, %rd75;
	add.s64 	%rd422, %rd559, %rd74;
	add.s64 	%rd423, %rd559, %rd73;
	add.s64 	%rd424, %rd559, %rd72;
	add.s64 	%rd425, %rd559, %rd71;
	add.s64 	%rd426, %rd559, %rd70;
	add.s64 	%rd427, %rd559, %rd69;
	add.s64 	%rd428, %rd559, %rd68;
	add.s64 	%rd429, %rd559, %rd67;
	add.s64 	%rd430, %rd559, %rd66;
	add.s64 	%rd431, %rd559, %rd65;
	add.s64 	%rd432, %rd559, %rd64;
	add.s64 	%rd433, %rd559, %rd63;
	add.s64 	%rd434, %rd559, %rd62;
	add.s64 	%rd435, %rd559, %rd61;
	add.s64 	%rd436, %rd559, %rd60;
	add.s64 	%rd437, %rd559, %rd59;
	add.s64 	%rd438, %rd559, %rd58;
	add.s64 	%rd439, %rd559, %rd57;
	add.s64 	%rd440, %rd559, %rd56;
	add.s64 	%rd441, %rd559, %rd55;
	add.s64 	%rd442, %rd559, %rd54;
	add.s64 	%rd443, %rd559, %rd53;
	add.s64 	%rd444, %rd559, %rd52;
	add.s64 	%rd445, %rd559, %rd51;
	add.s64 	%rd446, %rd559, %rd50;
	add.s64 	%rd447, %rd559, %rd49;
	add.s64 	%rd448, %rd559, %rd48;
	add.s64 	%rd449, %rd559, %rd47;
	add.s64 	%rd450, %rd559, %rd46;
	add.s64 	%rd451, %rd559, %rd45;
	add.s64 	%rd452, %rd559, %rd44;
	add.s64 	%rd453, %rd559, %rd43;
	add.s64 	%rd454, %rd559, %rd42;
	add.s64 	%rd455, %rd559, %rd41;
	add.s64 	%rd456, %rd559, %rd40;
	add.s64 	%rd457, %rd559, %rd39;
	add.s64 	%rd458, %rd559, %rd38;
	add.s64 	%rd459, %rd559, %rd37;
	add.s64 	%rd460, %rd559, %rd36;
	add.s64 	%rd461, %rd559, %rd35;
	add.s64 	%rd462, %rd559, %rd34;
	add.s64 	%rd463, %rd559, %rd33;
	add.s64 	%rd464, %rd559, %rd32;
	add.s64 	%rd465, %rd559, %rd31;
	add.s64 	%rd466, %rd559, %rd30;
	add.s64 	%rd467, %rd559, %rd29;
	add.s64 	%rd468, %rd559, %rd28;
	add.s64 	%rd469, %rd559, %rd27;
	add.s64 	%rd470, %rd559, %rd26;
	add.s64 	%rd471, %rd559, %rd25;
	add.s64 	%rd472, %rd559, %rd24;
	add.s64 	%rd473, %rd559, %rd23;
	add.s64 	%rd474, %rd559, %rd22;
	add.s64 	%rd475, %rd559, %rd21;
	.loc	1 78 22                         // matmul.py:78:22
	add.s64 	%rd476, %rd559, %rd18;
	add.s32 	%r992, %r1285, 1;
	setp.lt.s32 	%p56, %r992, 3;
	selp.b32 	%r1285, %r992, 0, %p56;
	.loc	1 81 51                         // matmul.py:81:51
	setp.lt.s32 	%p57, %r4, %r1283;
	.loc	1 81 20                         // matmul.py:81:20
	shl.b32 	%r993, %r1285, 15;
	add.s32 	%r994, %r597, %r993;
	bar.sync 	0;
	add.s32 	%r795, %r994, %r596;
	add.s32 	%r797, %r994, %r600;
	add.s32 	%r799, %r994, %r602;
	add.s32 	%r801, %r994, %r604;
	add.s32 	%r803, %r994, %r606;
	add.s32 	%r805, %r994, %r608;
	add.s32 	%r807, %r994, %r610;
	add.s32 	%r809, %r994, %r612;
	add.s32 	%r811, %r994, %r614;
	add.s32 	%r813, %r994, %r616;
	add.s32 	%r815, %r994, %r618;
	add.s32 	%r817, %r994, %r620;
	add.s32 	%r819, %r994, %r622;
	add.s32 	%r821, %r994, %r624;
	add.s32 	%r823, %r994, %r626;
	add.s32 	%r825, %r994, %r628;
	selp.b32 	%r1011, 16, 0, %p57;
	selp.b32 	%r798, %r1011, 0, %p54;
	// begin inline asm
	cp.async.cg.shared.global [ %r795 + 0 ], [ %rd397 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r797 + 0 ], [ %rd398 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r799 + 0 ], [ %rd399 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r801 + 0 ], [ %rd400 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r803 + 0 ], [ %rd401 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r805 + 0 ], [ %rd402 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r807 + 0 ], [ %rd403 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r809 + 0 ], [ %rd404 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r811 + 0 ], [ %rd405 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r813 + 0 ], [ %rd406 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r815 + 0 ], [ %rd407 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r817 + 0 ], [ %rd408 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r819 + 0 ], [ %rd409 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r821 + 0 ], [ %rd410 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r823 + 0 ], [ %rd411 + 0 ], 0x10, %r798;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r825 + 0 ], [ %rd412 + 0 ], 0x10, %r798;
	// end inline asm
	cp.async.commit_group;
	.loc	1 82 51                         // matmul.py:82:51
	setp.lt.s32 	%p58, %r28, %r1283;
	setp.lt.s32 	%p59, %r29, %r1283;
	setp.lt.s32 	%p60, %r30, %r1283;
	setp.lt.s32 	%p61, %r31, %r1283;
	setp.lt.s32 	%p62, %r32, %r1283;
	setp.lt.s32 	%p63, %r33, %r1283;
	setp.lt.s32 	%p64, %r34, %r1283;
	setp.lt.s32 	%p65, %r35, %r1283;
	setp.lt.s32 	%p66, %r36, %r1283;
	setp.lt.s32 	%p67, %r37, %r1283;
	setp.lt.s32 	%p68, %r38, %r1283;
	setp.lt.s32 	%p69, %r39, %r1283;
	setp.lt.s32 	%p70, %r40, %r1283;
	setp.lt.s32 	%p71, %r41, %r1283;
	setp.lt.s32 	%p72, %r42, %r1283;
	setp.lt.s32 	%p73, %r43, %r1283;
	.loc	1 82 20                         // matmul.py:82:20
	add.s32 	%r1012, %r639, %r993;
	add.s32 	%r827, %r1012, %r638;
	add.s32 	%r1015, %r1012, %r640;
	add.s32 	%r829, %r1015, 144;
	add.s32 	%r831, %r1015, 288;
	add.s32 	%r833, %r1015, 432;
	add.s32 	%r835, %r1015, 16;
	add.s32 	%r837, %r1015, 128;
	add.s32 	%r839, %r1015, 304;
	add.s32 	%r841, %r1015, 416;
	add.s32 	%r843, %r1015, 32;
	add.s32 	%r845, %r1015, 176;
	add.s32 	%r847, %r1015, 256;
	add.s32 	%r849, %r1015, 400;
	add.s32 	%r851, %r1015, 48;
	add.s32 	%r853, %r1015, 160;
	add.s32 	%r855, %r1015, 272;
	add.s32 	%r857, %r1015, 384;
	add.s32 	%r859, %r1012, %r642;
	add.s32 	%r861, %r1012, %r643;
	add.s32 	%r863, %r1012, %r644;
	add.s32 	%r865, %r1012, %r645;
	add.s32 	%r867, %r1012, %r646;
	add.s32 	%r869, %r1012, %r647;
	add.s32 	%r871, %r1012, %r648;
	add.s32 	%r873, %r1012, %r649;
	add.s32 	%r875, %r1012, %r650;
	add.s32 	%r877, %r1012, %r651;
	add.s32 	%r879, %r1012, %r652;
	add.s32 	%r881, %r1012, %r653;
	add.s32 	%r883, %r1012, %r654;
	add.s32 	%r885, %r1012, %r655;
	add.s32 	%r887, %r1012, %r656;
	add.s32 	%r889, %r1012, %r657;
	add.s32 	%r891, %r1015, 16384;
	add.s32 	%r893, %r1015, 16528;
	add.s32 	%r895, %r1015, 16672;
	add.s32 	%r897, %r1015, 16816;
	add.s32 	%r899, %r1015, 16400;
	add.s32 	%r901, %r1015, 16512;
	add.s32 	%r903, %r1015, 16688;
	add.s32 	%r905, %r1015, 16800;
	add.s32 	%r907, %r1015, 16416;
	add.s32 	%r909, %r1015, 16560;
	add.s32 	%r911, %r1015, 16640;
	add.s32 	%r913, %r1015, 16784;
	add.s32 	%r915, %r1015, 16432;
	add.s32 	%r917, %r1015, 16544;
	add.s32 	%r919, %r1015, 16656;
	add.s32 	%r921, %r1015, 16768;
	add.s32 	%r923, %r1012, %r658;
	add.s32 	%r925, %r1012, %r659;
	add.s32 	%r927, %r1012, %r660;
	add.s32 	%r929, %r1012, %r661;
	add.s32 	%r931, %r1012, %r662;
	add.s32 	%r933, %r1012, %r663;
	add.s32 	%r935, %r1012, %r664;
	add.s32 	%r937, %r1012, %r665;
	add.s32 	%r939, %r1012, %r666;
	add.s32 	%r941, %r1012, %r667;
	add.s32 	%r943, %r1012, %r668;
	add.s32 	%r945, %r1012, %r669;
	add.s32 	%r947, %r1012, %r670;
	add.s32 	%r949, %r1012, %r671;
	add.s32 	%r951, %r1012, %r672;
	add.s32 	%r953, %r1012, %r673;
	selp.b32 	%r1048, 4, 0, %p58;
	selp.b32 	%r830, %r1048, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r827 + 0 ], [ %rd413 + 0 ], 0x4, %r830;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r829 + 0 ], [ %rd414 + 0 ], 0x4, %r830;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r831 + 0 ], [ %rd415 + 0 ], 0x4, %r830;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r833 + 0 ], [ %rd416 + 0 ], 0x4, %r830;
	// end inline asm
	selp.b32 	%r1049, 4, 0, %p59;
	selp.b32 	%r838, %r1049, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r835 + 0 ], [ %rd417 + 0 ], 0x4, %r838;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r837 + 0 ], [ %rd418 + 0 ], 0x4, %r838;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r839 + 0 ], [ %rd419 + 0 ], 0x4, %r838;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r841 + 0 ], [ %rd420 + 0 ], 0x4, %r838;
	// end inline asm
	selp.b32 	%r1050, 4, 0, %p60;
	selp.b32 	%r846, %r1050, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r843 + 0 ], [ %rd421 + 0 ], 0x4, %r846;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r845 + 0 ], [ %rd422 + 0 ], 0x4, %r846;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r847 + 0 ], [ %rd423 + 0 ], 0x4, %r846;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r849 + 0 ], [ %rd424 + 0 ], 0x4, %r846;
	// end inline asm
	selp.b32 	%r1051, 4, 0, %p61;
	selp.b32 	%r854, %r1051, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r851 + 0 ], [ %rd425 + 0 ], 0x4, %r854;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r853 + 0 ], [ %rd426 + 0 ], 0x4, %r854;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r855 + 0 ], [ %rd427 + 0 ], 0x4, %r854;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r857 + 0 ], [ %rd428 + 0 ], 0x4, %r854;
	// end inline asm
	selp.b32 	%r1052, 4, 0, %p62;
	selp.b32 	%r862, %r1052, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r859 + 0 ], [ %rd429 + 0 ], 0x4, %r862;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r861 + 0 ], [ %rd430 + 0 ], 0x4, %r862;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r863 + 0 ], [ %rd431 + 0 ], 0x4, %r862;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r865 + 0 ], [ %rd432 + 0 ], 0x4, %r862;
	// end inline asm
	selp.b32 	%r1053, 4, 0, %p63;
	selp.b32 	%r870, %r1053, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r867 + 0 ], [ %rd433 + 0 ], 0x4, %r870;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r869 + 0 ], [ %rd434 + 0 ], 0x4, %r870;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r871 + 0 ], [ %rd435 + 0 ], 0x4, %r870;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r873 + 0 ], [ %rd436 + 0 ], 0x4, %r870;
	// end inline asm
	selp.b32 	%r1054, 4, 0, %p64;
	selp.b32 	%r878, %r1054, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r875 + 0 ], [ %rd437 + 0 ], 0x4, %r878;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r877 + 0 ], [ %rd438 + 0 ], 0x4, %r878;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r879 + 0 ], [ %rd439 + 0 ], 0x4, %r878;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r881 + 0 ], [ %rd440 + 0 ], 0x4, %r878;
	// end inline asm
	selp.b32 	%r1055, 4, 0, %p65;
	selp.b32 	%r886, %r1055, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r883 + 0 ], [ %rd441 + 0 ], 0x4, %r886;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r885 + 0 ], [ %rd442 + 0 ], 0x4, %r886;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r887 + 0 ], [ %rd443 + 0 ], 0x4, %r886;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r889 + 0 ], [ %rd444 + 0 ], 0x4, %r886;
	// end inline asm
	selp.b32 	%r1056, 4, 0, %p66;
	selp.b32 	%r894, %r1056, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r891 + 0 ], [ %rd445 + 0 ], 0x4, %r894;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r893 + 0 ], [ %rd446 + 0 ], 0x4, %r894;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r895 + 0 ], [ %rd447 + 0 ], 0x4, %r894;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r897 + 0 ], [ %rd448 + 0 ], 0x4, %r894;
	// end inline asm
	selp.b32 	%r1057, 4, 0, %p67;
	selp.b32 	%r902, %r1057, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r899 + 0 ], [ %rd449 + 0 ], 0x4, %r902;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r901 + 0 ], [ %rd450 + 0 ], 0x4, %r902;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r903 + 0 ], [ %rd451 + 0 ], 0x4, %r902;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r905 + 0 ], [ %rd452 + 0 ], 0x4, %r902;
	// end inline asm
	selp.b32 	%r1058, 4, 0, %p68;
	selp.b32 	%r910, %r1058, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r907 + 0 ], [ %rd453 + 0 ], 0x4, %r910;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r909 + 0 ], [ %rd454 + 0 ], 0x4, %r910;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r911 + 0 ], [ %rd455 + 0 ], 0x4, %r910;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r913 + 0 ], [ %rd456 + 0 ], 0x4, %r910;
	// end inline asm
	selp.b32 	%r1059, 4, 0, %p69;
	selp.b32 	%r918, %r1059, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r915 + 0 ], [ %rd457 + 0 ], 0x4, %r918;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r917 + 0 ], [ %rd458 + 0 ], 0x4, %r918;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r919 + 0 ], [ %rd459 + 0 ], 0x4, %r918;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r921 + 0 ], [ %rd460 + 0 ], 0x4, %r918;
	// end inline asm
	selp.b32 	%r1060, 4, 0, %p70;
	selp.b32 	%r926, %r1060, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r923 + 0 ], [ %rd461 + 0 ], 0x4, %r926;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r925 + 0 ], [ %rd462 + 0 ], 0x4, %r926;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r927 + 0 ], [ %rd463 + 0 ], 0x4, %r926;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r929 + 0 ], [ %rd464 + 0 ], 0x4, %r926;
	// end inline asm
	selp.b32 	%r1061, 4, 0, %p71;
	selp.b32 	%r934, %r1061, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r931 + 0 ], [ %rd465 + 0 ], 0x4, %r934;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r933 + 0 ], [ %rd466 + 0 ], 0x4, %r934;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r935 + 0 ], [ %rd467 + 0 ], 0x4, %r934;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r937 + 0 ], [ %rd468 + 0 ], 0x4, %r934;
	// end inline asm
	selp.b32 	%r1062, 4, 0, %p72;
	selp.b32 	%r942, %r1062, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r939 + 0 ], [ %rd469 + 0 ], 0x4, %r942;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r941 + 0 ], [ %rd470 + 0 ], 0x4, %r942;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r943 + 0 ], [ %rd471 + 0 ], 0x4, %r942;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r945 + 0 ], [ %rd472 + 0 ], 0x4, %r942;
	// end inline asm
	selp.b32 	%r1063, 4, 0, %p73;
	selp.b32 	%r950, %r1063, 0, %p54;
	// begin inline asm
	cp.async.ca.shared.global [ %r947 + 0 ], [ %rd473 + 0 ], 0x4, %r950;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r949 + 0 ], [ %rd474 + 0 ], 0x4, %r950;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r951 + 0 ], [ %rd475 + 0 ], 0x4, %r950;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r953 + 0 ], [ %rd476 + 0 ], 0x4, %r950;
	// end inline asm
	cp.async.commit_group;
	.loc	1 78 22                         // matmul.py:78:22
	add.s32 	%r1286, %r1286, 1;
	add.s64 	%rd559, %rd559, %rd20;
	add.s64 	%rd558, %rd558, 256;
	add.s32 	%r1283, %r1283, -64;
	setp.ne.s32 	%p74, %r44, %r1286;
	@%p74 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 71 51                         // matmul.py:71:51
	shl.b32 	%r1192, %r1, 3;
	and.b32  	%r1193, %r1192, 120;
	.loc	1 72 38                         // matmul.py:72:38
	or.b32  	%r1194, %r21, %r1193;
	.loc	1 78 22                         // matmul.py:78:22
	// begin inline asm
	// wait for regs: %f2959,%f2960,%f2961,%f2962,%f2963,%f2964,%f2965,%f2966,%f2967,%f2968,%f2969,%f2970,%f2971,%f2972,%f2973,%f2974,%f2975,%f2976,%f2977,%f2978,%f2979,%f2980,%f2981,%f2982,%f2983,%f2984,%f2985,%f2986,%f2987,%f2988,%f2989,%f2990,%f2991,%f2992,%f2993,%f2994,%f2995,%f2996,%f2997,%f2998,%f2999,%f3000,%f3001,%f3002,%f3003,%f3004,%f3005,%f3006,%f3007,%f3008,%f3009,%f3010,%f3011,%f3012,%f3013,%f3014,%f3015,%f3016,%f3017,%f3018,%f3019,%f3020,%f3021,%f3022,%f3023,%f3024,%f3025,%f3026,%f3027,%f3028,%f3029,%f3030,%f3031,%f3032,%f3033,%f3034,%f3035,%f3036,%f3037,%f3038,%f3039,%f3040,%f3041,%f3042,%f3043,%f3044,%f3045,%f3046,%f3047,%f3048,%f3049,%f3050,%f3051,%f3052,%f3053,%f3054,%f3055,%f3056,%f3057,%f3058,%f3059,%f3060,%f3061,%f3062,%f3063,%f3064,%f3065,%f3066,%f3067,%f3068,%f3069,%f3070,%f3071,%f3072,%f3073,%f3074,%f3075,%f3076,%f3077,%f3078,%f3079,%f3080,%f3081,%f3082,%f3083,%f3084,%f3085,%f3086
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 0;
	bar.sync 	0;
	.loc	1 90 23                         // matmul.py:90:23
	cvt.rn.f16.f32 	%rs1, %f2959;
	cvt.rn.f16.f32 	%rs2, %f2960;
	cvt.rn.f16.f32 	%rs3, %f2961;
	cvt.rn.f16.f32 	%rs4, %f2962;
	cvt.rn.f16.f32 	%rs5, %f2963;
	cvt.rn.f16.f32 	%rs6, %f2964;
	cvt.rn.f16.f32 	%rs7, %f2965;
	cvt.rn.f16.f32 	%rs8, %f2966;
	cvt.rn.f16.f32 	%rs9, %f2967;
	cvt.rn.f16.f32 	%rs10, %f2968;
	cvt.rn.f16.f32 	%rs11, %f2969;
	cvt.rn.f16.f32 	%rs12, %f2970;
	cvt.rn.f16.f32 	%rs13, %f2971;
	cvt.rn.f16.f32 	%rs14, %f2972;
	cvt.rn.f16.f32 	%rs15, %f2973;
	cvt.rn.f16.f32 	%rs16, %f2974;
	cvt.rn.f16.f32 	%rs17, %f2975;
	cvt.rn.f16.f32 	%rs18, %f2976;
	cvt.rn.f16.f32 	%rs19, %f2977;
	cvt.rn.f16.f32 	%rs20, %f2978;
	cvt.rn.f16.f32 	%rs21, %f2979;
	cvt.rn.f16.f32 	%rs22, %f2980;
	cvt.rn.f16.f32 	%rs23, %f2981;
	cvt.rn.f16.f32 	%rs24, %f2982;
	cvt.rn.f16.f32 	%rs25, %f2983;
	cvt.rn.f16.f32 	%rs26, %f2984;
	cvt.rn.f16.f32 	%rs27, %f2985;
	cvt.rn.f16.f32 	%rs28, %f2986;
	cvt.rn.f16.f32 	%rs29, %f2987;
	cvt.rn.f16.f32 	%rs30, %f2988;
	cvt.rn.f16.f32 	%rs31, %f2989;
	cvt.rn.f16.f32 	%rs32, %f2990;
	cvt.rn.f16.f32 	%rs33, %f2991;
	cvt.rn.f16.f32 	%rs34, %f2992;
	cvt.rn.f16.f32 	%rs35, %f2993;
	cvt.rn.f16.f32 	%rs36, %f2994;
	cvt.rn.f16.f32 	%rs37, %f2995;
	cvt.rn.f16.f32 	%rs38, %f2996;
	cvt.rn.f16.f32 	%rs39, %f2997;
	cvt.rn.f16.f32 	%rs40, %f2998;
	cvt.rn.f16.f32 	%rs41, %f2999;
	cvt.rn.f16.f32 	%rs42, %f3000;
	cvt.rn.f16.f32 	%rs43, %f3001;
	cvt.rn.f16.f32 	%rs44, %f3002;
	cvt.rn.f16.f32 	%rs45, %f3003;
	cvt.rn.f16.f32 	%rs46, %f3004;
	cvt.rn.f16.f32 	%rs47, %f3005;
	cvt.rn.f16.f32 	%rs48, %f3006;
	cvt.rn.f16.f32 	%rs49, %f3007;
	cvt.rn.f16.f32 	%rs50, %f3008;
	cvt.rn.f16.f32 	%rs51, %f3009;
	cvt.rn.f16.f32 	%rs52, %f3010;
	cvt.rn.f16.f32 	%rs53, %f3011;
	cvt.rn.f16.f32 	%rs54, %f3012;
	cvt.rn.f16.f32 	%rs55, %f3013;
	cvt.rn.f16.f32 	%rs56, %f3014;
	cvt.rn.f16.f32 	%rs57, %f3015;
	cvt.rn.f16.f32 	%rs58, %f3016;
	cvt.rn.f16.f32 	%rs59, %f3017;
	cvt.rn.f16.f32 	%rs60, %f3018;
	cvt.rn.f16.f32 	%rs61, %f3019;
	cvt.rn.f16.f32 	%rs62, %f3020;
	cvt.rn.f16.f32 	%rs63, %f3021;
	cvt.rn.f16.f32 	%rs64, %f3022;
	cvt.rn.f16.f32 	%rs65, %f3023;
	cvt.rn.f16.f32 	%rs66, %f3024;
	cvt.rn.f16.f32 	%rs67, %f3025;
	cvt.rn.f16.f32 	%rs68, %f3026;
	cvt.rn.f16.f32 	%rs69, %f3027;
	cvt.rn.f16.f32 	%rs70, %f3028;
	cvt.rn.f16.f32 	%rs71, %f3029;
	cvt.rn.f16.f32 	%rs72, %f3030;
	cvt.rn.f16.f32 	%rs73, %f3031;
	cvt.rn.f16.f32 	%rs74, %f3032;
	cvt.rn.f16.f32 	%rs75, %f3033;
	cvt.rn.f16.f32 	%rs76, %f3034;
	cvt.rn.f16.f32 	%rs77, %f3035;
	cvt.rn.f16.f32 	%rs78, %f3036;
	cvt.rn.f16.f32 	%rs79, %f3037;
	cvt.rn.f16.f32 	%rs80, %f3038;
	cvt.rn.f16.f32 	%rs81, %f3039;
	cvt.rn.f16.f32 	%rs82, %f3040;
	cvt.rn.f16.f32 	%rs83, %f3041;
	cvt.rn.f16.f32 	%rs84, %f3042;
	cvt.rn.f16.f32 	%rs85, %f3043;
	cvt.rn.f16.f32 	%rs86, %f3044;
	cvt.rn.f16.f32 	%rs87, %f3045;
	cvt.rn.f16.f32 	%rs88, %f3046;
	cvt.rn.f16.f32 	%rs89, %f3047;
	cvt.rn.f16.f32 	%rs90, %f3048;
	cvt.rn.f16.f32 	%rs91, %f3049;
	cvt.rn.f16.f32 	%rs92, %f3050;
	cvt.rn.f16.f32 	%rs93, %f3051;
	cvt.rn.f16.f32 	%rs94, %f3052;
	cvt.rn.f16.f32 	%rs95, %f3053;
	cvt.rn.f16.f32 	%rs96, %f3054;
	cvt.rn.f16.f32 	%rs97, %f3055;
	cvt.rn.f16.f32 	%rs98, %f3056;
	cvt.rn.f16.f32 	%rs99, %f3057;
	cvt.rn.f16.f32 	%rs100, %f3058;
	cvt.rn.f16.f32 	%rs101, %f3059;
	cvt.rn.f16.f32 	%rs102, %f3060;
	cvt.rn.f16.f32 	%rs103, %f3061;
	cvt.rn.f16.f32 	%rs104, %f3062;
	cvt.rn.f16.f32 	%rs105, %f3063;
	cvt.rn.f16.f32 	%rs106, %f3064;
	cvt.rn.f16.f32 	%rs107, %f3065;
	cvt.rn.f16.f32 	%rs108, %f3066;
	cvt.rn.f16.f32 	%rs109, %f3067;
	cvt.rn.f16.f32 	%rs110, %f3068;
	cvt.rn.f16.f32 	%rs111, %f3069;
	cvt.rn.f16.f32 	%rs112, %f3070;
	cvt.rn.f16.f32 	%rs113, %f3071;
	cvt.rn.f16.f32 	%rs114, %f3072;
	cvt.rn.f16.f32 	%rs115, %f3073;
	cvt.rn.f16.f32 	%rs116, %f3074;
	cvt.rn.f16.f32 	%rs117, %f3075;
	cvt.rn.f16.f32 	%rs118, %f3076;
	cvt.rn.f16.f32 	%rs119, %f3077;
	cvt.rn.f16.f32 	%rs120, %f3078;
	cvt.rn.f16.f32 	%rs121, %f3079;
	cvt.rn.f16.f32 	%rs122, %f3080;
	cvt.rn.f16.f32 	%rs123, %f3081;
	cvt.rn.f16.f32 	%rs124, %f3082;
	cvt.rn.f16.f32 	%rs125, %f3083;
	cvt.rn.f16.f32 	%rs126, %f3084;
	cvt.rn.f16.f32 	%rs127, %f3085;
	cvt.rn.f16.f32 	%rs128, %f3086;
	.loc	1 96 33                         // matmul.py:96:33
	mul.lo.s32 	%r1195, %r5, %r109;
	shl.b32 	%r1196, %r109, 3;
	add.s32 	%r1197, %r1195, %r1196;
	add.s32 	%r1198, %r1197, %r1196;
	add.s32 	%r1199, %r1198, %r1196;
	add.s32 	%r1200, %r1199, %r1196;
	add.s32 	%r1201, %r1200, %r1196;
	add.s32 	%r1202, %r1201, %r1196;
	add.s32 	%r1203, %r1202, %r1196;
	add.s32 	%r1204, %r1203, %r1196;
	add.s32 	%r1205, %r1204, %r1196;
	add.s32 	%r1206, %r1205, %r1196;
	add.s32 	%r1207, %r1206, %r1196;
	add.s32 	%r1208, %r1207, %r1196;
	add.s32 	%r1209, %r1208, %r1196;
	add.s32 	%r1210, %r1209, %r1196;
	add.s32 	%r1211, %r1210, %r1196;
	.loc	1 96 21                         // matmul.py:96:21
	mul.wide.s32 	%rd525, %r1195, 2;
	add.s64 	%rd526, %rd106, %rd525;
	mul.wide.s32 	%rd527, %r1197, 2;
	add.s64 	%rd528, %rd106, %rd527;
	mul.wide.s32 	%rd529, %r1198, 2;
	add.s64 	%rd530, %rd106, %rd529;
	mul.wide.s32 	%rd531, %r1199, 2;
	add.s64 	%rd532, %rd106, %rd531;
	mul.wide.s32 	%rd533, %r1200, 2;
	add.s64 	%rd534, %rd106, %rd533;
	mul.wide.s32 	%rd535, %r1201, 2;
	add.s64 	%rd536, %rd106, %rd535;
	mul.wide.s32 	%rd537, %r1202, 2;
	add.s64 	%rd538, %rd106, %rd537;
	mul.wide.s32 	%rd539, %r1203, 2;
	add.s64 	%rd540, %rd106, %rd539;
	mul.wide.s32 	%rd541, %r1204, 2;
	add.s64 	%rd542, %rd106, %rd541;
	mul.wide.s32 	%rd543, %r1205, 2;
	add.s64 	%rd544, %rd106, %rd543;
	mul.wide.s32 	%rd545, %r1206, 2;
	add.s64 	%rd546, %rd106, %rd545;
	mul.wide.s32 	%rd547, %r1207, 2;
	add.s64 	%rd548, %rd106, %rd547;
	mul.wide.s32 	%rd549, %r1208, 2;
	add.s64 	%rd550, %rd106, %rd549;
	mul.wide.s32 	%rd551, %r1209, 2;
	add.s64 	%rd552, %rd106, %rd551;
	mul.wide.s32 	%rd553, %r1210, 2;
	add.s64 	%rd554, %rd106, %rd553;
	mul.wide.s32 	%rd555, %r1211, 2;
	add.s64 	%rd556, %rd106, %rd555;
	.loc	1 96 52                         // matmul.py:96:52
	mul.wide.s32 	%rd557, %r1194, 2;
	add.s64 	%rd509, %rd526, %rd557;
	add.s64 	%rd510, %rd528, %rd557;
	add.s64 	%rd511, %rd530, %rd557;
	add.s64 	%rd512, %rd532, %rd557;
	add.s64 	%rd513, %rd534, %rd557;
	add.s64 	%rd514, %rd536, %rd557;
	add.s64 	%rd515, %rd538, %rd557;
	add.s64 	%rd516, %rd540, %rd557;
	add.s64 	%rd517, %rd542, %rd557;
	add.s64 	%rd518, %rd544, %rd557;
	add.s64 	%rd519, %rd546, %rd557;
	add.s64 	%rd520, %rd548, %rd557;
	add.s64 	%rd521, %rd550, %rd557;
	add.s64 	%rd522, %rd552, %rd557;
	add.s64 	%rd523, %rd554, %rd557;
	add.s64 	%rd524, %rd556, %rd557;
	.loc	1 97 33                         // matmul.py:97:33
	setp.lt.s32 	%p155, %r5, %r105;
	setp.lt.s32 	%p156, %r6, %r105;
	setp.lt.s32 	%p157, %r7, %r105;
	setp.lt.s32 	%p158, %r8, %r105;
	setp.lt.s32 	%p159, %r9, %r105;
	setp.lt.s32 	%p160, %r10, %r105;
	setp.lt.s32 	%p161, %r11, %r105;
	setp.lt.s32 	%p162, %r12, %r105;
	setp.lt.s32 	%p163, %r13, %r105;
	setp.lt.s32 	%p164, %r14, %r105;
	setp.lt.s32 	%p165, %r15, %r105;
	setp.lt.s32 	%p166, %r16, %r105;
	setp.lt.s32 	%p167, %r17, %r105;
	setp.lt.s32 	%p168, %r18, %r105;
	setp.lt.s32 	%p169, %r19, %r105;
	setp.lt.s32 	%p170, %r20, %r105;
	.loc	1 97 58                         // matmul.py:97:58
	setp.lt.s32 	%p171, %r1194, %r106;
	.loc	1 97 39                         // matmul.py:97:39
	and.pred  	%p139, %p155, %p171;
	and.pred  	%p140, %p156, %p171;
	and.pred  	%p141, %p157, %p171;
	and.pred  	%p142, %p158, %p171;
	and.pred  	%p143, %p159, %p171;
	and.pred  	%p144, %p160, %p171;
	and.pred  	%p145, %p161, %p171;
	and.pred  	%p146, %p162, %p171;
	and.pred  	%p147, %p163, %p171;
	and.pred  	%p148, %p164, %p171;
	and.pred  	%p149, %p165, %p171;
	and.pred  	%p150, %p166, %p171;
	and.pred  	%p151, %p167, %p171;
	and.pred  	%p152, %p168, %p171;
	and.pred  	%p153, %p169, %p171;
	and.pred  	%p154, %p170, %p171;
	.loc	1 98 21                         // matmul.py:98:21
	shl.b32 	%r1212, %r1, 1;
	and.b32  	%r1213, %r1212, 6;
	shl.b32 	%r1214, %r1, 5;
	and.b32  	%r1215, %r1214, 384;
	or.b32  	%r1216, %r1215, %r1213;
	shl.b32 	%r1217, %r3, 5;
	or.b32  	%r1218, %r1216, %r1217;
	shl.b32 	%r1219, %r1, 6;
	and.b32  	%r1220, %r1219, 6144;
	or.b32  	%r1221, %r1218, %r1220;
	and.b32  	%r1222, %r1192, 1016;
	shr.u32 	%r1223, %r1221, 4;
	add.s32 	%r1224, %r1223, %r1221;
	shl.b32 	%r1225, %r1224, 1;
	add.s32 	%r1064, %r597, %r1225;
	mov.pred 	%p75, -1;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1064 + 0 ], { %rs1, %rs2 };
	// end inline asm
	or.b32  	%r1227, %r1221, 1024;
	shr.u32 	%r1228, %r1227, 4;
	add.s32 	%r1229, %r1228, %r1221;
	shl.b32 	%r1230, %r1229, 1;
	add.s32 	%r1231, %r597, %r1230;
	add.s32 	%r1065, %r1231, 2048;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1065 + 0 ], { %rs3, %rs4 };
	// end inline asm
	add.s32 	%r1066, %r1064, 16;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1066 + 0 ], { %rs5, %rs6 };
	// end inline asm
	add.s32 	%r1067, %r1231, 2064;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1067 + 0 ], { %rs7, %rs8 };
	// end inline asm
	add.s32 	%r1068, %r1064, 32;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1068 + 0 ], { %rs9, %rs10 };
	// end inline asm
	and.b32  	%r1232, %r1228, 504;
	add.s32 	%r1233, %r1232, %r1221;
	shl.b32 	%r1234, %r1233, 1;
	add.s32 	%r1235, %r597, %r1234;
	add.s32 	%r1069, %r1235, 2080;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1069 + 0 ], { %rs11, %rs12 };
	// end inline asm
	add.s32 	%r1070, %r1064, 48;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1070 + 0 ], { %rs13, %rs14 };
	// end inline asm
	add.s32 	%r1071, %r1235, 2096;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1071 + 0 ], { %rs15, %rs16 };
	// end inline asm
	add.s32 	%r1072, %r1064, 64;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1072 + 0 ], { %rs17, %rs18 };
	// end inline asm
	add.s32 	%r1073, %r1235, 2112;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1073 + 0 ], { %rs19, %rs20 };
	// end inline asm
	add.s32 	%r1074, %r1064, 80;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1074 + 0 ], { %rs21, %rs22 };
	// end inline asm
	add.s32 	%r1075, %r1235, 2128;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1075 + 0 ], { %rs23, %rs24 };
	// end inline asm
	add.s32 	%r1076, %r1064, 96;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1076 + 0 ], { %rs25, %rs26 };
	// end inline asm
	add.s32 	%r1077, %r1235, 2144;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1077 + 0 ], { %rs27, %rs28 };
	// end inline asm
	add.s32 	%r1078, %r1064, 112;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1078 + 0 ], { %rs29, %rs30 };
	// end inline asm
	add.s32 	%r1079, %r1235, 2160;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1079 + 0 ], { %rs31, %rs32 };
	// end inline asm
	add.s32 	%r1080, %r1064, 128;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1080 + 0 ], { %rs33, %rs34 };
	// end inline asm
	add.s32 	%r1081, %r1235, 2176;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1081 + 0 ], { %rs35, %rs36 };
	// end inline asm
	add.s32 	%r1082, %r1064, 144;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1082 + 0 ], { %rs37, %rs38 };
	// end inline asm
	add.s32 	%r1083, %r1235, 2192;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1083 + 0 ], { %rs39, %rs40 };
	// end inline asm
	add.s32 	%r1084, %r1064, 160;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1084 + 0 ], { %rs41, %rs42 };
	// end inline asm
	add.s32 	%r1085, %r1235, 2208;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1085 + 0 ], { %rs43, %rs44 };
	// end inline asm
	add.s32 	%r1086, %r1064, 176;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1086 + 0 ], { %rs45, %rs46 };
	// end inline asm
	add.s32 	%r1087, %r1235, 2224;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1087 + 0 ], { %rs47, %rs48 };
	// end inline asm
	add.s32 	%r1088, %r1064, 192;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1088 + 0 ], { %rs49, %rs50 };
	// end inline asm
	add.s32 	%r1089, %r1235, 2240;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1089 + 0 ], { %rs51, %rs52 };
	// end inline asm
	add.s32 	%r1090, %r1064, 208;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1090 + 0 ], { %rs53, %rs54 };
	// end inline asm
	add.s32 	%r1091, %r1235, 2256;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1091 + 0 ], { %rs55, %rs56 };
	// end inline asm
	add.s32 	%r1092, %r1064, 224;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1092 + 0 ], { %rs57, %rs58 };
	// end inline asm
	add.s32 	%r1093, %r1235, 2272;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1093 + 0 ], { %rs59, %rs60 };
	// end inline asm
	add.s32 	%r1094, %r1064, 240;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1094 + 0 ], { %rs61, %rs62 };
	// end inline asm
	add.s32 	%r1095, %r1235, 2288;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1095 + 0 ], { %rs63, %rs64 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r1236, %r1, 1;
	and.b32  	%r1237, %r1236, 56;
	add.s32 	%r1238, %r1237, %r1222;
	shl.b32 	%r1239, %r1238, 1;
	add.s32 	%r1240, %r597, %r1239;
	ld.shared.v4.u32 	{%r1128, %r1129, %r1130, %r1131}, [%r1240];
	or.b32  	%r1241, %r1222, 1024;
	shr.u32 	%r1242, %r1241, 4;
	and.b32  	%r1243, %r1242, 120;
	add.s32 	%r1244, %r1243, %r1222;
	shl.b32 	%r1245, %r1244, 1;
	add.s32 	%r1246, %r597, %r1245;
	ld.shared.v4.u32 	{%r1132, %r1133, %r1134, %r1135}, [%r1246+2048];
	or.b32  	%r1247, %r1222, 2048;
	shr.u32 	%r1248, %r1247, 4;
	and.b32  	%r1249, %r1248, 184;
	add.s32 	%r1250, %r1249, %r1222;
	shl.b32 	%r1251, %r1250, 1;
	add.s32 	%r1252, %r597, %r1251;
	ld.shared.v4.u32 	{%r1136, %r1137, %r1138, %r1139}, [%r1252+4096];
	or.b32  	%r1253, %r1222, 3072;
	shr.u32 	%r1254, %r1253, 4;
	and.b32  	%r1255, %r1254, 248;
	add.s32 	%r1256, %r1255, %r1222;
	shl.b32 	%r1257, %r1256, 1;
	add.s32 	%r1258, %r597, %r1257;
	ld.shared.v4.u32 	{%r1140, %r1141, %r1142, %r1143}, [%r1258+6144];
	or.b32  	%r1259, %r1222, 4096;
	shr.u32 	%r1260, %r1259, 4;
	and.b32  	%r1261, %r1260, 312;
	add.s32 	%r1262, %r1261, %r1222;
	shl.b32 	%r1263, %r1262, 1;
	add.s32 	%r1264, %r597, %r1263;
	ld.shared.v4.u32 	{%r1144, %r1145, %r1146, %r1147}, [%r1264+8192];
	or.b32  	%r1265, %r1222, 5120;
	shr.u32 	%r1266, %r1265, 4;
	and.b32  	%r1267, %r1266, 376;
	add.s32 	%r1268, %r1267, %r1222;
	shl.b32 	%r1269, %r1268, 1;
	add.s32 	%r1270, %r597, %r1269;
	ld.shared.v4.u32 	{%r1148, %r1149, %r1150, %r1151}, [%r1270+10240];
	or.b32  	%r1271, %r1222, 6144;
	shr.u32 	%r1272, %r1271, 4;
	and.b32  	%r1273, %r1272, 440;
	add.s32 	%r1274, %r1273, %r1222;
	shl.b32 	%r1275, %r1274, 1;
	add.s32 	%r1276, %r597, %r1275;
	ld.shared.v4.u32 	{%r1152, %r1153, %r1154, %r1155}, [%r1276+12288];
	or.b32  	%r1277, %r1222, 7168;
	shr.u32 	%r1278, %r1277, 4;
	and.b32  	%r1279, %r1278, 504;
	add.s32 	%r1280, %r1279, %r1222;
	shl.b32 	%r1281, %r1280, 1;
	add.s32 	%r1282, %r597, %r1281;
	ld.shared.v4.u32 	{%r1156, %r1157, %r1158, %r1159}, [%r1282+14336];
	bar.sync 	0;
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1064 + 0 ], { %rs65, %rs66 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1065 + 0 ], { %rs67, %rs68 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1066 + 0 ], { %rs69, %rs70 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1067 + 0 ], { %rs71, %rs72 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1068 + 0 ], { %rs73, %rs74 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1069 + 0 ], { %rs75, %rs76 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1070 + 0 ], { %rs77, %rs78 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1071 + 0 ], { %rs79, %rs80 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1072 + 0 ], { %rs81, %rs82 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1073 + 0 ], { %rs83, %rs84 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1074 + 0 ], { %rs85, %rs86 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1075 + 0 ], { %rs87, %rs88 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1076 + 0 ], { %rs89, %rs90 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1077 + 0 ], { %rs91, %rs92 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1078 + 0 ], { %rs93, %rs94 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1079 + 0 ], { %rs95, %rs96 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1080 + 0 ], { %rs97, %rs98 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1081 + 0 ], { %rs99, %rs100 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1082 + 0 ], { %rs101, %rs102 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1083 + 0 ], { %rs103, %rs104 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1084 + 0 ], { %rs105, %rs106 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1085 + 0 ], { %rs107, %rs108 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1086 + 0 ], { %rs109, %rs110 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1087 + 0 ], { %rs111, %rs112 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1088 + 0 ], { %rs113, %rs114 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1089 + 0 ], { %rs115, %rs116 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1090 + 0 ], { %rs117, %rs118 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1091 + 0 ], { %rs119, %rs120 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1092 + 0 ], { %rs121, %rs122 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1093 + 0 ], { %rs123, %rs124 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1094 + 0 ], { %rs125, %rs126 };
	// end inline asm
	// begin inline asm
	@%p75 st.shared.v2.b16 [ %r1095 + 0 ], { %rs127, %rs128 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r1160, %r1161, %r1162, %r1163}, [%r1240];
	ld.shared.v4.u32 	{%r1164, %r1165, %r1166, %r1167}, [%r1246+2048];
	ld.shared.v4.u32 	{%r1168, %r1169, %r1170, %r1171}, [%r1252+4096];
	ld.shared.v4.u32 	{%r1172, %r1173, %r1174, %r1175}, [%r1258+6144];
	ld.shared.v4.u32 	{%r1176, %r1177, %r1178, %r1179}, [%r1264+8192];
	ld.shared.v4.u32 	{%r1180, %r1181, %r1182, %r1183}, [%r1270+10240];
	ld.shared.v4.u32 	{%r1184, %r1185, %r1186, %r1187}, [%r1276+12288];
	ld.shared.v4.u32 	{%r1188, %r1189, %r1190, %r1191}, [%r1282+14336];
	// begin inline asm
	@%p139 st.global.v4.b32 [ %rd509 + 0 ], { %r1128, %r1129, %r1130, %r1131 };
	// end inline asm
	// begin inline asm
	@%p140 st.global.v4.b32 [ %rd510 + 0 ], { %r1132, %r1133, %r1134, %r1135 };
	// end inline asm
	// begin inline asm
	@%p141 st.global.v4.b32 [ %rd511 + 0 ], { %r1136, %r1137, %r1138, %r1139 };
	// end inline asm
	// begin inline asm
	@%p142 st.global.v4.b32 [ %rd512 + 0 ], { %r1140, %r1141, %r1142, %r1143 };
	// end inline asm
	// begin inline asm
	@%p143 st.global.v4.b32 [ %rd513 + 0 ], { %r1144, %r1145, %r1146, %r1147 };
	// end inline asm
	// begin inline asm
	@%p144 st.global.v4.b32 [ %rd514 + 0 ], { %r1148, %r1149, %r1150, %r1151 };
	// end inline asm
	// begin inline asm
	@%p145 st.global.v4.b32 [ %rd515 + 0 ], { %r1152, %r1153, %r1154, %r1155 };
	// end inline asm
	// begin inline asm
	@%p146 st.global.v4.b32 [ %rd516 + 0 ], { %r1156, %r1157, %r1158, %r1159 };
	// end inline asm
	// begin inline asm
	@%p147 st.global.v4.b32 [ %rd517 + 0 ], { %r1160, %r1161, %r1162, %r1163 };
	// end inline asm
	// begin inline asm
	@%p148 st.global.v4.b32 [ %rd518 + 0 ], { %r1164, %r1165, %r1166, %r1167 };
	// end inline asm
	// begin inline asm
	@%p149 st.global.v4.b32 [ %rd519 + 0 ], { %r1168, %r1169, %r1170, %r1171 };
	// end inline asm
	// begin inline asm
	@%p150 st.global.v4.b32 [ %rd520 + 0 ], { %r1172, %r1173, %r1174, %r1175 };
	// end inline asm
	// begin inline asm
	@%p151 st.global.v4.b32 [ %rd521 + 0 ], { %r1176, %r1177, %r1178, %r1179 };
	// end inline asm
	// begin inline asm
	@%p152 st.global.v4.b32 [ %rd522 + 0 ], { %r1180, %r1181, %r1182, %r1183 };
	// end inline asm
	// begin inline asm
	@%p153 st.global.v4.b32 [ %rd523 + 0 ], { %r1184, %r1185, %r1186, %r1187 };
	// end inline asm
	// begin inline asm
	@%p154 st.global.v4.b32 [ %rd524 + 0 ], { %r1188, %r1189, %r1190, %r1191 };
	// end inline asm
	.loc	1 98 4                          // matmul.py:98:4
	ret;
$L__tmp6:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/scratch/projects/triton-gg/reproducer/./matmul.py"
	.file	2 "/scratch/projects/triton/triton-by/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 183                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xb0 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 115
.b8 99
.b8 114
.b8 97
.b8 116
.b8 99
.b8 104
.b8 47
.b8 112
.b8 114
.b8 111
.b8 106
.b8 101
.b8 99
.b8 116
.b8 115
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 103
.b8 103
.b8 47
.b8 114
.b8 101
.b8 112
.b8 114
.b8 111
.b8 100
.b8 117
.b8 99
.b8 101
.b8 114
.b8 47
.b8 46
.b8 0
.b8 2                                   // Abbrev [2] 0x4c:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5c:0x5e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 76                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x71:0x18 DW_TAG_inlined_subroutine
.b32 76                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 62                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x89:0x18 DW_TAG_inlined_subroutine
.b32 76                                 // DW_AT_abstract_origin
.b64 $L__tmp2                           // DW_AT_low_pc
.b64 $L__tmp3                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 63                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xa1:0x18 DW_TAG_inlined_subroutine
.b32 76                                 // DW_AT_abstract_origin
.b64 $L__tmp4                           // DW_AT_low_pc
.b64 $L__tmp5                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 78                                  // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
